"use strict";(self.webpackChunktracetest_docs=self.webpackChunktracetest_docs||[]).push([[8980],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=l(n),g=o,d=p["".concat(s,".").concat(g)]||p[g]||f[g]||a;return n?r.createElement(d,i(i({ref:t},u),{},{components:n})):r.createElement(d,i({ref:t},u))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=g;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[p]="string"==typeof e?e:o,i[1]=c;for(var l=2;l<a;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},25663:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>f,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var r=n(87462),o=(n(67294),n(3905));const a={},i="Server configuration",c={unversionedId:"server-configuration",id:"server-configuration",title:"Server configuration",description:"Tracetest can be configured using a config.yaml file placed on the same directory as its executable. It is useful to configure some aspects of how tracetest should behave. This section is dedicated to explain the options we currently have available.",source:"@site/docs/server-configuration.md",sourceDirName:".",slug:"/server-configuration",permalink:"/server-configuration",draft:!1,editUrl:"https://github.com/kubeshop/tracetest/blob/main/docs/docs/server-configuration.md",tags:[],version:"current",frontMatter:{}},s={},l=[{value:"Configuration file example",id:"configuration-file-example",level:2},{value:"Providing a configuration when running a container",id:"providing-a-configuration-when-running-a-container",level:2}],u={toc:l},p="wrapper";function f(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"server-configuration"},"Server configuration"),(0,o.kt)("p",null,"Tracetest can be configured using a config.yaml file placed on the same directory as its executable. It is useful to configure some aspects of how tracetest should behave. This section is dedicated to explain the options we currently have available."),(0,o.kt)("h2",{id:"configuration-file-example"},"Configuration file example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'# Connection string to the postgres instance\npostgres:\n  host: localhost\n  user: postgres\n  password: postgres\n\n# Instance of jaeger that will be used to retrieve the trace of the service under test\ntracingBackend:\n  dataStore:\n    type: jaeger\n    jaeger:\n      endpoint: localhost:16685\n      tls:\n        insecure: true\n\n# Configure how traces should be pooled from the tracing storage.\npoolingConfig:\n    # How long tracetest can wait for a trace to be complete? After this period, the pooling process will timeout\n    # and the test will be marked as failed.\n    maxWaitTimeForTrace: 90s\n\n    # How much time tracetest should wait before trying to fetch the trace since the last execution?\n    retryDelay: 5s\n\n# Server configuration\nserver:\n  # Enables you to add a prefix to the server path. So, instead of running tracetest on http://localhost:11633, it would run on http://localhost:11633/tracetest instead.\n  pathPrefix: /tracetest\n  httpPort: 11633\n\n# Google analytics configuration\ngoogleAnalytics:\n  enabled: false\n  measurementId: ""\n  secretKey: ""\n\n# How tracetest should generate telemetry data.\ntelemetry:\n  serviceName: tracetest\n  sampling: 100\n  otelCollectorEndpoint: localhost:4317\n')),(0,o.kt)("h2",{id:"providing-a-configuration-when-running-a-container"},"Providing a configuration when running a container"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cmd"},'docker run --volume "`pwd`/my-config-file.yaml:/app/config.yaml" kubeshop/tracetest\n')))}f.isMDXComponent=!0}}]);