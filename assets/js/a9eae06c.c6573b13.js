"use strict";(self.webpackChunktracetest_docs=self.webpackChunktracetest_docs||[]).push([[5535],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=c(n),u=r,h=m["".concat(l,".").concat(u)]||m[u]||d[u]||a;return n?o.createElement(h,s(s({ref:t},p),{},{components:n})):o.createElement(h,s({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,s=new Array(a);s[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[m]="string"==typeof e?e:r,s[1]=i;for(var c=2;c<a;c++)s[c]=n[c];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},25027:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var o=n(87462),r=(n(67294),n(3905));const a={},s="Running Tracetest with SigNoz (OpenTelemetry Collector & Pokeshop API)",i={unversionedId:"examples-tutorials/recipes/running-tracetest-with-signoz-pokeshop",id:"examples-tutorials/recipes/running-tracetest-with-signoz-pokeshop",title:"Running Tracetest with SigNoz (OpenTelemetry Collector & Pokeshop API)",description:"Check out the source code on GitHub here.",source:"@site/docs/examples-tutorials/recipes/running-tracetest-with-signoz-pokeshop.md",sourceDirName:"examples-tutorials/recipes",slug:"/examples-tutorials/recipes/running-tracetest-with-signoz-pokeshop",permalink:"/examples-tutorials/recipes/running-tracetest-with-signoz-pokeshop",draft:!1,editUrl:"https://github.com/kubeshop/tracetest/blob/main/docs/docs/examples-tutorials/recipes/running-tracetest-with-signoz-pokeshop.md",tags:[],version:"current",frontMatter:{},sidebar:"examplesTutorialsSidebar",previous:{title:"Running Tracetest With Honeycomb",permalink:"/examples-tutorials/recipes/running-tracetest-with-honeycomb"},next:{title:"Running Tracetest with Jaeger",permalink:"/examples-tutorials/recipes/running-tracetest-with-jaeger"}},l={},c=[{value:"Pokeshop API with SigNoz and Tracetest",id:"pokeshop-api-with-signoz-and-tracetest",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Project Structure",id:"project-structure",level:2},{value:"1. Tracetest",id:"1-tracetest",level:3},{value:"2. SigNoz",id:"2-signoz",level:3},{value:"Docker Compose Network",id:"docker-compose-network",level:3},{value:"Pokeshop API",id:"pokeshop-api",level:2},{value:"Tracetest",id:"tracetest",level:2},{value:"SigNoz",id:"signoz",level:2},{value:"Run the Pokeshop API, SigNoz and Tracetest",id:"run-the-pokeshop-api-signoz-and-tracetest",level:2},{value:"Run Tracetest Tests with the Tracetest CLI",id:"run-tracetest-tests-with-the-tracetest-cli",level:2},{value:"View Trace Spans Over Time in SigNoz",id:"view-trace-spans-over-time-in-signoz",level:2},{value:"Learn More",id:"learn-more",level:2}],p={toc:c},m="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"running-tracetest-with-signoz-opentelemetry-collector--pokeshop-api"},"Running Tracetest with SigNoz (OpenTelemetry Collector & Pokeshop API)"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{parentName:"p",href:"https://github.com/kubeshop/tracetest/tree/main/examples/tracetest-signoz-pokeshop"},"Check out the source code on GitHub here."))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://tracetest.io/"},"Tracetest")," is a testing tool based on ",(0,r.kt)("a",{parentName:"p",href:"https://opentelemetry.io/"},"OpenTelemetry")," that allows you to test your distributed application. It allows you to use data from distributed traces generated by OpenTelemetry to validate and assert if your application has the desired behavior defined by your test definitions."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://signoz.io/"},"SigNoz")," is an open-source observability tool. A single tool for all your observability needs - APM, logs, metrics, exceptions, alerts, and dashboards powered by a powerful query builder."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://docs.tracetest.io/live-examples/pokeshop/overview"},"Pokeshop API")," is a testing ground, the team at Tracetest has implemented a sample instrumented API around the ",(0,r.kt)("a",{parentName:"p",href:"https://pokeapi.co/"},"PokeAPI"),"."),(0,r.kt)("h2",{id:"pokeshop-api-with-signoz-and-tracetest"},"Pokeshop API with SigNoz and Tracetest"),(0,r.kt)("p",null,"This is a simple quick start guide on how to configure a fully instrumented API to be used with Tracetest for enhancing your E2E and integration tests with trace-based testing. The infrastructure will use SigNoz as the trace data store and the Pokeshop API to generate the telemetry data."),(0,r.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("p",null,"You will need ",(0,r.kt)("a",{parentName:"p",href:"https://docs.docker.com/get-docker/"},"Docker")," and ",(0,r.kt)("a",{parentName:"p",href:"https://docs.docker.com/compose/install/"},"Docker Compose")," installed on your machine to run this quick start app!"),(0,r.kt)("h2",{id:"project-structure"},"Project Structure"),(0,r.kt)("p",null,"The project is built with Docker Compose."),(0,r.kt)("h3",{id:"1-tracetest"},"1. Tracetest"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"collector.config.yaml")," file, ",(0,r.kt)("inlineCode",{parentName:"p"},"tracetest-provision.yaml"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"tracetest-config.yaml")," in the ",(0,r.kt)("inlineCode",{parentName:"p"},"tracetest")," directory are for the configuring Tracetest and it's OpenTelemetry Collector."),(0,r.kt)("h3",{id:"2-signoz"},"2. SigNoz"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"signoz")," directory contains all files required to configure SigNoz."),(0,r.kt)("h3",{id:"docker-compose-network"},"Docker Compose Network"),(0,r.kt)("p",null,"All ",(0,r.kt)("inlineCode",{parentName:"p"},"services")," in the ",(0,r.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," are on the same network and will be reachable by hostname from within other services. E.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"tracetest:4317")," in the ",(0,r.kt)("inlineCode",{parentName:"p"},"tracetest/collector.config.yaml")," will map to the ",(0,r.kt)("inlineCode",{parentName:"p"},"tracetest")," service, where the port ",(0,r.kt)("inlineCode",{parentName:"p"},"4317")," is the port where Tracetest accepts telemetry data."),(0,r.kt)("h2",{id:"pokeshop-api"},"Pokeshop API"),(0,r.kt)("p",null,"The Pokeshop API is a fully instrumented REST API that makes use of different services to mimic a real life scenario."),(0,r.kt)("p",null,"It is instrumented using the ",(0,r.kt)("a",{parentName:"p",href:"https://opentelemetry.io/docs/instrumentation/js/getting-started/nodejs/"},"OpenTelemetry standards for Node.js"),", sending the data to the ADOT collector that will be pushing the telemetry information to both the AWS X-Ray service."),(0,r.kt)("p",null,"This is a fragment from the main tracing file from the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/kubeshop/pokeshop"},"Pokeshop API repo.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import { BatchSpanProcessor } from '@opentelemetry/sdk-trace-base';\nimport * as opentelemetry from '@opentelemetry/api';\nimport { api, NodeSDK } from '@opentelemetry/sdk-node';\nimport { OTLPTraceExporter } from '@opentelemetry/exporter-trace-otlp-grpc';\nimport { Resource } from '@opentelemetry/resources';\nimport * as dotenv from 'dotenv';\nimport { SemanticResourceAttributes } from '@opentelemetry/semantic-conventions';\nimport { IORedisInstrumentation } from '@opentelemetry/instrumentation-ioredis';\nimport { PgInstrumentation } from '@opentelemetry/instrumentation-pg';\nimport { AmqplibInstrumentation } from '@opentelemetry/instrumentation-amqplib';\nimport { SpanStatusCode } from '@opentelemetry/api';\nimport { B3Propagator } from '@opentelemetry/propagator-b3';\n\ndotenv.config();\napi.propagation.setGlobalPropagator(new B3Propagator());\n\nconst { COLLECTOR_ENDPOINT = '', SERVICE_NAME = 'pokeshop' } = process.env;\n\nlet globalTracer: opentelemetry.Tracer | null = null;\n\nasync function createTracer(): Promise<opentelemetry.Tracer> {\n  const collectorExporter = new OTLPTraceExporter({\n    url: COLLECTOR_ENDPOINT,\n  });\n\n  const spanProcessor = new BatchSpanProcessor(collectorExporter);\n  const sdk = new NodeSDK({\n    traceExporter: collectorExporter,\n    // @ts-ignore\n    instrumentations: [new IORedisInstrumentation(), new PgInstrumentation(), new AmqplibInstrumentation()],\n  });\n\n  sdk.configureTracerProvider({}, spanProcessor);\n  sdk.addResource(\n    new Resource({\n      [SemanticResourceAttributes.SERVICE_NAME]: SERVICE_NAME,\n    })\n  );\n\n  await sdk.start();\n  process.on('SIGTERM', () => {\n    sdk\n      .shutdown()\n      .then(\n        () => console.log('SDK shut down successfully'),\n        err => console.log('Error shutting down SDK', err)\n      )\n      .finally(() => process.exit(0));\n  });\n\n  const tracer = opentelemetry.trace.getTracer(SERVICE_NAME);\n\n  globalTracer = tracer;\n\n  return globalTracer;\n}\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," file includes the definitions for all of the required services by the Pokeshop API, which includes:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Postgres")," - To save Pokemon information."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Redis")," - For in memory strage."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"RabbitMQ")," - For async processing use cases."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"API")," - The Pokeshop API main container."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Worker")," - The Pokeshop worker instance.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'version: "3"\n\n#... \n\nservices:\n  #... \n\n  # Demo\n  postgres:\n    image: postgres:14\n    environment:\n      POSTGRES_PASSWORD: postgres\n      POSTGRES_USER: postgres\n    healthcheck:\n      test: pg_isready -U "$$POSTGRES_USER" -d "$$POSTGRES_DB"\n      interval: 1s\n      timeout: 5s\n      retries: 60\n    ports:\n      - 5432:5432\n\n  demo-cache:\n    image: redis:6\n    restart: unless-stopped\n    healthcheck:\n      test: ["CMD", "redis-cli", "ping"]\n      interval: 1s\n      timeout: 3s\n      retries: 60\n\n  demo-queue:\n    image: rabbitmq:3.8-management\n    restart: unless-stopped\n    healthcheck:\n      test: rabbitmq-diagnostics -q check_running\n      interval: 1s\n      timeout: 5s\n      retries: 60\n\n  demo-api:\n    image: kubeshop/demo-pokemon-api:latest\n    restart: unless-stopped\n    pull_policy: always\n    environment:\n      REDIS_URL: demo-cache\n      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/postgres?schema=public\n      RABBITMQ_HOST: demo-queue\n      POKE_API_BASE_URL: https://pokeapi.co/api/v2\n      COLLECTOR_ENDPOINT: http://otel-collector:4317\n      NPM_RUN_COMMAND: api\n    ports:\n      - "8081:8081"\n    healthcheck:\n      test: ["CMD", "wget", "--spider", "localhost:8081"]\n      interval: 1s\n      timeout: 3s\n      retries: 60\n    depends_on:\n      postgres:\n        condition: service_healthy\n      demo-cache:\n        condition: service_healthy\n      demo-queue:\n        condition: service_healthy\n\n  demo-worker:\n    image: kubeshop/demo-pokemon-api:latest\n    restart: unless-stopped\n    pull_policy: always\n    environment:\n      REDIS_URL: demo-cache\n      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/postgres?schema=public\n      RABBITMQ_HOST: demo-queue\n      POKE_API_BASE_URL: https://pokeapi.co/api/v2\n      COLLECTOR_ENDPOINT: http://otel-collector:4317\n      NPM_RUN_COMMAND: worker\n    depends_on:\n      postgres:\n        condition: service_healthy\n      demo-cache:\n        condition: service_healthy\n      demo-queue:\n        condition: service_healthy\n\n  demo-rpc:\n    image: kubeshop/demo-pokemon-api:latest\n    restart: unless-stopped\n    pull_policy: always\n    environment:\n      REDIS_URL: demo-cache\n      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/postgres?schema=public\n      RABBITMQ_HOST: demo-queue\n      POKE_API_BASE_URL: https://pokeapi.co/api/v2\n      COLLECTOR_ENDPOINT: http://otel-collector:4317\n      NPM_RUN_COMMAND: rpc\n    ports:\n      - 8082:8082\n    healthcheck:\n      test: ["CMD", "lsof", "-i", "8082"]\n      interval: 1s\n      timeout: 3s\n      retries: 60\n    depends_on:\n      postgres:\n        condition: service_healthy\n      demo-cache:\n        condition: service_healthy\n      demo-queue:\n        condition: service_healthy\n  # Demo End\n')),(0,r.kt)("h2",{id:"tracetest"},"Tracetest"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," includes two services related to Tracetest. The Tracetest instance also connects to the ",(0,r.kt)("inlineCode",{parentName:"p"},"postgres")," service."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Postgres")," - Postgres is a prerequisite for Tracetest to work. It stores trace data when running the trace-based tests."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://opentelemetry.io/docs/collector/getting-started/"},(0,r.kt)("strong",{parentName:"a"},"OpenTelemetry Collector"),")")," - Vendor-agnostic way to receive, process and export telemetry data."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://tracetest.io/"},(0,r.kt)("strong",{parentName:"a"},"Tracetest"))," - Trace-based testing that generates end-to-end tests automatically from traces.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'version: "3"\n\n# ...\nservices:\n\n  # ...\n\n  # Tracetest\n  tracetest:\n    image: kubeshop/tracetest:${TAG:-latest}\n    platform: linux/amd64\n    volumes:\n      - type: bind\n        source: ./tracetest/tracetest-config.yaml\n        target: /app/tracetest.yaml\n      - type: bind\n        source: ./tracetest/tracetest-provision.yaml\n        target: /app/provision.yaml\n    command: --provisioning-file /app/provision.yaml\n    ports:\n      - 11633:11633\n    extra_hosts:\n      - "host.docker.internal:host-gateway"\n    depends_on:\n      postgres:\n        condition: service_healthy\n      otel-collector:\n        condition: service_started\n    healthcheck:\n      test: [ "CMD", "wget", "--spider", "localhost:11633" ]\n      interval: 1s\n      timeout: 3s\n      retries: 60\n    environment:\n      TRACETEST_DEV: ${TRACETEST_DEV}\n\n  otel-collector:\n    image: otel/opentelemetry-collector:0.54.0\n    command:\n      - "--config"\n      - "/otel-local-config.yaml"\n    volumes:\n      - ./tracetest/collector.config.yaml:/otel-local-config.yaml\n    ports:\n      - 4317:4317\n    depends_on:\n      signoz-otel-collector:\n        condition: service_started\n      signoz-otel-collector-metrics:\n        condition: service_started\n  # Tracetest End\n')),(0,r.kt)("p",null,"Tracetest depends on Postgres and the OpenTelemetry Collector. Tracetest requires config files to be loaded via a volume. The volumes are mapped from the ",(0,r.kt)("inlineCode",{parentName:"p"},"tracetest")," directory into the ",(0,r.kt)("inlineCode",{parentName:"p"},"root")," directory of the Tracetest container instance and the respective config files."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"collector.config.yaml")," file contains the OpenTelemetry Collector configuration that enables routing traces from the Pokeshop API to both Tracetest and SigNoz."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"# collector.config.yaml\n\nreceivers:\n  otlp:\n    protocols:\n      grpc:\n      http:\n\nprocessors:\n  batch:\n    timeout: 100ms\n\n  # Data sources: traces\n  probabilistic_sampler:\n    hash_seed: 22\n    sampling_percentage: 100\n\nexporters:\n  # OTLP for Tracetest\n  otlp/tracetest:\n    endpoint: tracetest:4317 # Send traces to Tracetest.\n    # Read more in docs here: https://docs.tracetest.io/configuration/connecting-to-data-stores/opentelemetry-collector\n    tls:\n      insecure: true\n  # OTLP for Signoz\n  otlp/signoz:\n    endpoint: signoz-otel-collector:4317\n    tls:\n      insecure: true\n\nservice:\n  pipelines:\n    traces:\n      receivers: [otlp]\n      processors: [probabilistic_sampler, batch]\n      exporters: [otlp/signoz,otlp/tracetest]\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"tracetest-config.yaml")," file contains the basic setup of connecting Tracetest to the Postgres instance. It also enables forwarding Tracetest's internal telemetry to SigNoz as well, with the ",(0,r.kt)("inlineCode",{parentName:"p"},"telemetry")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"server")," config."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"# tracetest-config.yaml\n\npostgres:\n  host: postgres\n  user: postgres\n  password: postgres\n  port: 5432\n  dbname: postgres\n  params: sslmode=disable\n\ntelemetry:\n  exporters:\n    collector:\n      serviceName: tracetest\n      sampling: 100 # 100%\n      exporter:\n        type: collector\n        collector:\n          endpoint: otel-collector:4317\n\nserver:\n  telemetry:\n    exporter: collector\n    applicationExporter: collector\n\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"tracetest-provision.yaml")," file defines the trace data store, set to SigNoz, meaning the traces will be forwarded via the OpenTelemetry Collector to both Tracetest when running tests and SigNoz where they are stored."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"# tracetest-provision.yaml\n\n---\ntype: PollingProfile\nspec:\n  name: Default\n  strategy: periodic\n  default: true\n  periodic:\n    retryDelay: 5s\n    timeout: 10m\n\n---\ntype: DataStore\nspec:\n  name: Signoz\n  type: signoz\n\n---\ntype: TestRunner\nspec:\n  id: current\n  name: default\n  requiredGates:\n    - analyzer-score\n    - test-specs\n\n---\ntype: Demo\nspec:\n  type: pokeshop\n  enabled: true\n  name: pokeshop\n  opentelemetryStore: {}\n  pokeshop:\n    httpEndpoint: http://demo-api:8081\n    grpcEndpoint: demo-rpc:8082\n")),(0,r.kt)("p",null,"How do traces reach SigNoz?"),(0,r.kt)("p",null,"The Pokeshop API code uses the native Node.js OpenTelemetry modules which send information to the OpenTelemetry Collector to be processed and then sent to the internal SigNoz OpenTelemetry Collector."),(0,r.kt)("h2",{id:"signoz"},"SigNoz"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," includes 7 services related to SigNoz."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://zookeeper.apache.org/"},(0,r.kt)("strong",{parentName:"a"},"Zookeeper"))," - ZooKeeper is a centralized service for maintaining configuration information, naming, providing distributed synchronization, and providing group services."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://clickhouse.com/"},(0,r.kt)("strong",{parentName:"a"},"ClickHouse"))," - ClickHouse is the fastest and most resource efficient open-source database for real-time apps and analytics."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/SigNoz/alertmanager"},(0,r.kt)("strong",{parentName:"a"},"SigNoz - Alert Manager"))," - The ",(0,r.kt)("inlineCode",{parentName:"li"},"Alertmanager")," handles alerts sent by client applications such as the Prometheus server. It takes care of deduplicating, grouping, and routing them to the correct receiver integrations such as email, PagerDuty, or OpsGenie. It also takes care of silencing and inhibition of alerts."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/SigNoz/signoz/tree/develop/pkg/query-service"},(0,r.kt)("strong",{parentName:"a"},"SigNoz - Query Service"))," - Handles querying for data."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/SigNoz/signoz/tree/develop/frontend"},(0,r.kt)("strong",{parentName:"a"},"SigNoz - Front end"))," - The SigNoz front-end app."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://opentelemetry.io/docs/collector/getting-started/"},(0,r.kt)("strong",{parentName:"a"},"SigNoz - OpenTelemetry Collector"),")")," - Vendor-agnostic way to receive, process and export telemetry data."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://opentelemetry.io/docs/collector/getting-started/"},(0,r.kt)("strong",{parentName:"a"},"SigNoz - OpenTelemetry Collector Metrics"),")")," - Vendor-agnostic way to receive, process and export telemetry data. This service is dedicated to metrics.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'version: "3"\n\n# ...\nservices:\n\n  # ...\n\n  # SigNoz\n  zookeeper-1:\n    image: bitnami/zookeeper:3.7.1\n    container_name: zookeeper-1\n    hostname: zookeeper-1\n    user: root\n    volumes:\n      - ./signoz/data/zookeeper-1:/bitnami/zookeeper\n    environment:\n      - ZOO_SERVER_ID=1\n      - ALLOW_ANONYMOUS_LOGIN=yes\n      - ZOO_AUTOPURGE_INTERVAL=1\n\n  clickhouse:\n    restart: on-failure\n    image: clickhouse/clickhouse-server:22.8.8-alpine\n    tty: true\n    depends_on:\n      - zookeeper-1\n    logging:\n      options:\n        max-size: 50m\n        max-file: "3"\n    healthcheck:\n      test: ["CMD", "wget", "--spider", "-q", "localhost:8123/ping"]\n      interval: 30s\n      timeout: 5s\n      retries: 3\n    ulimits:\n      nproc: 65535\n      nofile:\n        soft: 262144\n        hard: 262144\n    container_name: clickhouse\n    hostname: clickhouse\n    volumes:\n      - ./signoz/clickhouse-config.xml:/etc/clickhouse-server/config.xml\n      - ./signoz/clickhouse-users.xml:/etc/clickhouse-server/users.xml\n      - ./signoz/custom-function.xml:/etc/clickhouse-server/custom-function.xml\n      - ./signoz/clickhouse-cluster.xml:/etc/clickhouse-server/config.d/cluster.xml\n      - ./signoz/data/clickhouse/:/var/lib/clickhouse/\n      - ./signoz/user_scripts:/var/lib/clickhouse/user_scripts/\n\n  alertmanager:\n    image: signoz/alertmanager:${ALERTMANAGER_TAG:-0.23.1}\n    volumes:\n      - ./signoz/data/alertmanager:/data\n    depends_on:\n      query-service:\n        condition: service_healthy\n    restart: on-failure\n    command:\n      - --queryService.url=http://query-service:8085\n      - --storage.path=/data\n\n  query-service:\n    image: signoz/query-service:${DOCKER_TAG:-0.22.0}\n    command: ["-config=/root/config/prometheus.yml"]\n    volumes:\n      - ./signoz/prometheus.yml:/root/config/prometheus.yml\n      - ./signoz/data/signoz/:/var/lib/signoz/\n    environment:\n      - ClickHouseUrl=tcp://clickhouse:9000/?database=signoz_traces\n      - ALERTMANAGER_API_PREFIX=http://alertmanager:9093/api/\n      - SIGNOZ_LOCAL_DB_PATH=/var/lib/signoz/signoz.db\n      - DASHBOARDS_PATH=/root/config/dashboards\n      - STORAGE=clickhouse\n      - GODEBUG=netdns=go\n      - TELEMETRY_ENABLED=true\n      - DEPLOYMENT_TYPE=docker-standalone-amd\n    restart: on-failure\n    healthcheck:\n      test: ["CMD", "wget", "--spider", "-q", "localhost:8080/api/v1/health"]\n      interval: 30s\n      timeout: 5s\n      retries: 3\n    depends_on:\n      clickhouse:\n        condition: service_healthy\n\n  frontend:\n    image: signoz/frontend:${DOCKER_TAG:-0.22.0}\n    restart: on-failure\n    depends_on:\n      - alertmanager\n      - query-service\n    ports:\n      - 3301:3301\n    volumes:\n      - ./signoz/common/nginx-config.conf:/etc/nginx/conf.d/default.conf\n\n  signoz-otel-collector:\n    image: signoz/signoz-otel-collector:${OTELCOL_TAG:-0.79.2}\n    command: ["--config=/etc/otel-collector-config.yaml", "--feature-gates=-pkg.translator.prometheus.NormalizeName"]\n    user: root # required for reading docker container logs\n    volumes:\n      - ./signoz/otel-collector-config.yaml:/etc/otel-collector-config.yaml\n      - /var/lib/docker/containers:/var/lib/docker/containers:ro\n    environment:\n      - OTEL_RESOURCE_ATTRIBUTES=host.name=signoz-host,os.type=linux\n      - DOCKER_MULTI_NODE_CLUSTER=false\n      - LOW_CARDINAL_EXCEPTION_GROUPING=false\n    restart: on-failure\n    depends_on:\n      clickhouse:\n        condition: service_healthy\n\n  signoz-otel-collector-metrics:\n    image: signoz/signoz-otel-collector:${OTELCOL_TAG:-0.79.2}\n    command: ["--config=/etc/otel-collector-metrics-config.yaml", "--feature-gates=-pkg.translator.prometheus.NormalizeName"]\n    volumes:\n      - ./signoz/otel-collector-metrics-config.yaml:/etc/otel-collector-metrics-config.yaml\n    restart: on-failure\n    depends_on:\n      clickhouse:\n        condition: service_healthy\n  # SigNoz End\n')),(0,r.kt)("p",null,"SigNoz depends on ClickHouse and Zookeeper. The SigNoz services require config files to be loaded via volumes. The volumes are mapped from the ",(0,r.kt)("inlineCode",{parentName:"p"},"signoz")," directory."),(0,r.kt)("h2",{id:"run-the-pokeshop-api-signoz-and-tracetest"},"Run the Pokeshop API, SigNoz and Tracetest"),(0,r.kt)("p",null,"To start all the services, run this command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker-compose up\n")),(0,r.kt)("p",null,"This will start your Tracetest instance on ",(0,r.kt)("inlineCode",{parentName:"p"},"http://localhost:11633/"),". Open it and start creating tests!"),(0,r.kt)("p",null,"Make sure to use the ",(0,r.kt)("inlineCode",{parentName:"p"},"http://demo-api:8081/")," URL in your test creation, because your Pokeshop API and Tracetest are in the same network."),(0,r.kt)("h2",{id:"run-tracetest-tests-with-the-tracetest-cli"},"Run Tracetest Tests with the Tracetest CLI"),(0,r.kt)("p",null,"First, ",(0,r.kt)("a",{parentName:"p",href:"https://docs.tracetest.io/getting-started/installation#install-the-tracetest-cli"},"install the CLI"),".\nThen, configure the CLI:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"tracetest configure --endpoint http://localhost:11633\n")),(0,r.kt)("p",null,"Once configured, you can run a test against the Tracetest instance via the terminal."),(0,r.kt)("p",null,"Check out the ",(0,r.kt)("inlineCode",{parentName:"p"},"tests/test.yaml")," file."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'# tests/test.yaml\n\ntype: Test\nspec:\n  id: ZVJwkpC4g\n  name: Pokeshop - Import\n  description: Import a Pokemon\n  trigger:\n    type: http\n    httpRequest:\n      method: POST\n      url: http://demo-api:8081/pokemon/import\n      body: \'{"id":6}\'\n      headers:\n      - key: Content-Type\n        value: application/json\n  specs:\n  - selector: span[tracetest.span.type="http"]\n    name: "All HTTP Spans: Status  code is 200"\n    assertions:\n    - attr:http.status_code = 200\n  - selector: span[tracetest.span.type="general" name="import pokemon"]\n    name: Validate that this span always exists after the message queue\n    assertions:\n    - attr:tracetest.selected_spans.count  =  1\n    - attr:span.events not-contains "exception"\n  - selector: span[tracetest.span.type="database" name="get pokemon_6" db.system="redis" db.operation="get" db.redis.database_index="0"]\n    name: Validate that Redis is using Charizard.\n    assertions:\n    - attr:db.payload = \'{"key":"pokemon_6"}\'\n  - selector: span[tracetest.span.type="database" name="create postgres.pokemon" db.system="postgres" db.name="postgres" db.user="postgres" db.operation="create" db.sql.table="pokemon"]\n    name: Validate that the Postgres has Charizard.\n    assertions:\n    - attr:db.result contains "charizard"\n')),(0,r.kt)("p",null,"This file defines a test the same way you would through the Web UI."),(0,r.kt)("p",null,"To run the test, run this command in the terminal:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"tracetest run test -f ./tests/test.yaml\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Output:"',title:'"Output:"'},"\u2714 Pokeshop - Import (http://localhost:11633/test/ZVJwkpC4g/run/1/test) - trace id: 4eff1e124f67cf7a802b3c4fc51c19d4\n    \u2714 All HTTP Spans: Status  code is 200\n    \u2714 Validate that this span always exists after the message queue\n    \u2714 Validate that Redis is using Charizard.\n    \u2714 Validate that the Postgres has Charizard.\n")),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1692356467/Blogposts/Docs/screely-1692356427154_ewzduy.png",alt:"tracetest web ui overview"})),(0,r.kt)("h2",{id:"view-trace-spans-over-time-in-signoz"},"View Trace Spans Over Time in SigNoz"),(0,r.kt)("p",null,"To access a historical overview of all the trace spans the Pokeshop App generates, jump over to SigNoz."),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1692364823/Blogposts/Docs/screely-1692364815231_birvhj.png",alt:"signoz trace overview"})),(0,r.kt)("p",null,"You can also drill down into a particular trace."),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1692364964/Blogposts/Docs/screely-1692364957669_te7pe2.png",alt:"signoz trace drilldown"})),(0,r.kt)("p",null,"With SigNoz and Tracetest, you get the best of both worlds. You can run trace-based tests and automate running E2E and integration tests against real trace data. And, use SigNoz to get a historical overview of all traces your distributed application generates."),(0,r.kt)("h2",{id:"learn-more"},"Learn More"),(0,r.kt)("p",null,"Please visit our ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/kubeshop/tracetest/tree/main/examples"},"examples in GitHub")," and join our ",(0,r.kt)("a",{parentName:"p",href:"https://discord.gg/8MtcMrQNbX"},"Discord Community")," for more info!"))}d.isMDXComponent=!0}}]);