"use strict";(self.webpackChunktracetest_docs=self.webpackChunktracetest_docs||[]).push([[1750],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=p(n),u=a,h=d["".concat(l,".").concat(u)]||d[u]||m[u]||o;return n?r.createElement(h,s(s({ref:t},c),{},{components:n})):r.createElement(h,s({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[d]="string"==typeof e?e:a,s[1]=i;for(var p=2;p<o;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},77503:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var r=n(87462),a=(n(67294),n(3905));const o={},s="Running Tracetest with Jaeger",i={unversionedId:"examples-tutorials/recipes/running-tracetest-with-jaeger",id:"examples-tutorials/recipes/running-tracetest-with-jaeger",title:"Running Tracetest with Jaeger",description:"Check out the source code on GitHub here.",source:"@site/docs/examples-tutorials/recipes/running-tracetest-with-jaeger.md",sourceDirName:"examples-tutorials/recipes",slug:"/examples-tutorials/recipes/running-tracetest-with-jaeger",permalink:"/examples-tutorials/recipes/running-tracetest-with-jaeger",draft:!1,editUrl:"https://github.com/kubeshop/tracetest/blob/main/docs/docs/examples-tutorials/recipes/running-tracetest-with-jaeger.md",tags:[],version:"current",frontMatter:{},sidebar:"examplesTutorialsSidebar",previous:{title:"Running Tracetest with SigNoz (OpenTelemetry Collector & Pokeshop API)",permalink:"/examples-tutorials/recipes/running-tracetest-with-signoz-pokeshop"},next:{title:"Running Tracetest on AWS Fargate with Terraform",permalink:"/examples-tutorials/recipes/running-tracetest-with-aws-terraform"}},l={},p=[{value:"Sample Node.js App with Jaeger, OpenTelemetry and Tracetest",id:"sample-nodejs-app-with-jaeger-opentelemetry-and-tracetest",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Project Structure",id:"project-structure",level:2},{value:"1. Node.js App",id:"1-nodejs-app",level:3},{value:"2. Tracetest",id:"2-tracetest",level:3},{value:"Docker Compose Network",id:"docker-compose-network",level:3},{value:"Node.js App",id:"nodejs-app",level:2},{value:"Tracetest",id:"tracetest",level:2},{value:"Run Both the Node.js App and Tracetest",id:"run-both-the-nodejs-app-and-tracetest",level:2},{value:"Learn More",id:"learn-more",level:2}],c={toc:p},d="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(d,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"running-tracetest-with-jaeger"},"Running Tracetest with Jaeger"),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("a",{parentName:"p",href:"https://github.com/kubeshop/tracetest/tree/main/examples/quick-start-jaeger-nodejs"},"Check out the source code on GitHub here."))),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://tracetest.io/"},"Tracetest")," is a testing tool based on ",(0,a.kt)("a",{parentName:"p",href:"https://opentelemetry.io/"},"OpenTelemetry")," that allows you to test your distributed application. It allows you to use data from distributed traces generated by OpenTelemetry to validate and assert if your application has the desired behavior defined by your test definitions."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://www.jaegertracing.io/"},"Jaeger")," is an open-source, end-to-end distributed tracing solution. It allows you to monitor and troubleshoot transactions in complex distributed systems. It was developed and then open sourced by Uber Technologies. Jaeger provides a distributed tracing solution to enable transactions across multiple heterogeneous systems or microservices to be tracked and displayed as a cascading series of spans."),(0,a.kt)("h2",{id:"sample-nodejs-app-with-jaeger-opentelemetry-and-tracetest"},"Sample Node.js App with Jaeger, OpenTelemetry and Tracetest"),(0,a.kt)("p",null,"This is a simple quick start on how to configure a Node.js app to use OpenTelemetry instrumentation with traces and Tracetest for enhancing your E2E and integration tests with trace-based testing. The infrastructure will use Jaeger as the trace data store, and OpenTelemetry Collector to receive traces from the Node.js app and send them to Jaeger."),(0,a.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,a.kt)("p",null,"You will need ",(0,a.kt)("a",{parentName:"p",href:"https://docs.docker.com/get-docker/"},"Docker")," and ",(0,a.kt)("a",{parentName:"p",href:"https://docs.docker.com/compose/install/"},"Docker Compose")," installed on your machine to run this quick start app!"),(0,a.kt)("h2",{id:"project-structure"},"Project Structure"),(0,a.kt)("p",null,"The project is built with Docker Compose. It contains two distinct ",(0,a.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," files."),(0,a.kt)("h3",{id:"1-nodejs-app"},"1. Node.js App"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," file and ",(0,a.kt)("inlineCode",{parentName:"p"},"Dockerfile")," in the root directory are for the Node.js app."),(0,a.kt)("h3",{id:"2-tracetest"},"2. Tracetest"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," file, ",(0,a.kt)("inlineCode",{parentName:"p"},"collector.config.yaml"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"tracetest-provision.yaml"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"tracetest-config.yaml")," in the ",(0,a.kt)("inlineCode",{parentName:"p"},"tracetest")," directory are for the setting up Tracetest, Jaeger, and the OpenTelemetry Collector."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"tracetest")," directory is self-contained and will run all the prerequisites for enabling OpenTelemetry traces and trace-based testing with Tracetest."),(0,a.kt)("h3",{id:"docker-compose-network"},"Docker Compose Network"),(0,a.kt)("p",null,"All ",(0,a.kt)("inlineCode",{parentName:"p"},"services")," in the ",(0,a.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," are on the same network and will be reachable by hostname from within other services. For example, ",(0,a.kt)("inlineCode",{parentName:"p"},"jaeger:14250")," in the ",(0,a.kt)("inlineCode",{parentName:"p"},"collector.config.yaml")," will map to the ",(0,a.kt)("inlineCode",{parentName:"p"},"jaeger")," service, where the port ",(0,a.kt)("inlineCode",{parentName:"p"},"14250")," is the port where Jaeger accepts traces. And, ",(0,a.kt)("inlineCode",{parentName:"p"},"jaeger:16685")," in the ",(0,a.kt)("inlineCode",{parentName:"p"},"tracetest-provision.yaml")," will map to the ",(0,a.kt)("inlineCode",{parentName:"p"},"jaeger")," service and port ",(0,a.kt)("inlineCode",{parentName:"p"},"16685")," where Tracetest will fetch trace data from Jaeger."),(0,a.kt)("h2",{id:"nodejs-app"},"Node.js App"),(0,a.kt)("p",null,"The Node.js app is a simple Express app contained in the ",(0,a.kt)("inlineCode",{parentName:"p"},"app.js")," file."),(0,a.kt)("p",null,"The OpenTelemetry tracing is contained in the ",(0,a.kt)("inlineCode",{parentName:"p"},"tracing.otel.grpc.js")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"tracing.otel.http.js")," files.\nTraces will be sent to the OpenTelemetry Collector."),(0,a.kt)("p",null,"Here's the content of the ",(0,a.kt)("inlineCode",{parentName:"p"},"tracing.otel.grpc.js")," file:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'const opentelemetry = require("@opentelemetry/sdk-node");\nconst {\n  getNodeAutoInstrumentations,\n} = require("@opentelemetry/auto-instrumentations-node");\nconst {\n  OTLPTraceExporter,\n} = require("@opentelemetry/exporter-trace-otlp-grpc");\n\nconst sdk = new opentelemetry.NodeSDK({\n  traceExporter: new OTLPTraceExporter({ url: "http://otel-collector:4317" }),\n  instrumentations: [getNodeAutoInstrumentations()],\n});\nsdk.start();\n')),(0,a.kt)("p",null,"Depending on which of these you choose, traces will be sent to either the ",(0,a.kt)("inlineCode",{parentName:"p"},"grpc")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"http")," endpoint."),(0,a.kt)("p",null,"The hostnames and ports for these are:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"GRPC: ",(0,a.kt)("inlineCode",{parentName:"li"},"http://otel-collector:4317")),(0,a.kt)("li",{parentName:"ul"},"HTTP: ",(0,a.kt)("inlineCode",{parentName:"li"},"http://otel-collector:4318/v1/traces"))),(0,a.kt)("p",null,"Enabling the tracer is done by preloading the trace file."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"node -r ./tracing.otel.grpc.js app.js\n")),(0,a.kt)("p",null,"In the ",(0,a.kt)("inlineCode",{parentName:"p"},"package.json")," you will see two npm scripts for running the respective tracers alongside the ",(0,a.kt)("inlineCode",{parentName:"p"},"app.js"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'"scripts": {\n  "with-grpc-tracer":"node -r ./tracing.otel.grpc.js app.js",\n  "with-http-tracer":"node -r ./tracing.otel.http.js app.js"\n},\n')),(0,a.kt)("p",null,"To start the server, run this command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm run with-grpc-tracer\n# or\nnpm run with-http-tracer\n")),(0,a.kt)("p",null,"As you can see the ",(0,a.kt)("inlineCode",{parentName:"p"},"Dockerfile")," uses the command above."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Dockerfile"},'FROM node:slim\nWORKDIR /usr/src/app\nCOPY package*.json ./\nRUN npm install\nCOPY . .\nEXPOSE 8080\nCMD [ "npm", "run", "with-grpc-tracer" ]\n')),(0,a.kt)("p",null,"And, the ",(0,a.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," contains just one service for the Node.js app."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'version: "3"\nservices:\n  app:\n    image: quick-start-nodejs\n    build: .\n    ports:\n      - "8080:8080"\n')),(0,a.kt)("p",null,"To start it, run this command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker compose build # optional if you haven't already built the image\ndocker compose up\n")),(0,a.kt)("p",null,"This will start the Node.js app. But, you're not sending the traces anywhere."),(0,a.kt)("p",null,"Let's fix this by configuring Tracetest and OpenTelemetry Collector."),(0,a.kt)("h2",{id:"tracetest"},"Tracetest"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," in the ",(0,a.kt)("inlineCode",{parentName:"p"},"tracetest")," directory is configured with four services."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Postgres")," - Postgres is a prerequisite for Tracetest to work. It stores trace data when running the trace-based tests."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://opentelemetry.io/docs/collector/"},(0,a.kt)("strong",{parentName:"a"},"OpenTelemetry Collector"))," - A vendor-agnostic implementation of how to receive, process and export telemetry data."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://www.jaegertracing.io/"},(0,a.kt)("strong",{parentName:"a"},"Jaeger"))," - A trace data store."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://tracetest.io/"},(0,a.kt)("strong",{parentName:"a"},"Tracetest"))," - Trace-based testing that generates end-to-end tests automatically from traces.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'version: "3"\nservices:\n  tracetest:\n    image: kubeshop/tracetest:${TAG:-latest}\n    platform: linux/amd64\n    volumes:\n      - type: bind\n        source: ./tracetest/tracetest.config.yaml\n        target: /app/tracetest.yaml\n      - type: bind\n        source: tracetest/tracetest-provision.yaml\n        target: /app/provision.yaml\n    command: --provisioning-file /app/provision.yaml\n    ports:\n      - 11633:11633\n    depends_on:\n      postgres:\n        condition: service_healthy\n      jaeger:\n        condition: service_started\n      otel-collector:\n        condition: service_started\n    healthcheck:\n      test: ["CMD", "wget", "--spider", "localhost:11633"]\n      interval: 1s\n      timeout: 3s\n      retries: 60\n    environment:\n      TRACETEST_DEV: ${TRACETEST_DEV}\n\n  postgres:\n    image: postgres:14\n    environment:\n      POSTGRES_PASSWORD: postgres\n      POSTGRES_USER: postgres\n    healthcheck:\n      test: pg_isready -U "$$POSTGRES_USER" -d "$$POSTGRES_DB"\n      interval: 1s\n      timeout: 5s\n      retries: 60\n\n  otel-collector:\n    image: otel/opentelemetry-collector-contrib:0.59.0\n    command:\n      - "--config"\n      - "/otel-local-config.yaml"\n    volumes:\n      - ./tracetest/collector.config.yaml:/otel-local-config.yaml\n\n  jaeger:\n    image: jaegertracing/all-in-one:latest\n    restart: unless-stopped\n    ports:\n      - "16686:16686"\n    healthcheck:\n      test: ["CMD", "wget", "--spider", "localhost:16686"]\n      interval: 1s\n      timeout: 3s\n      retries: 60\n')),(0,a.kt)("p",null,"Tracetest depends on Postgres, Jaeger and the OpenTelemetry Collector. Both Tracetest and the OpenTelemetry Collector require config files to be loaded via a volume. The volumes are mapped from the root directory into the ",(0,a.kt)("inlineCode",{parentName:"p"},"tracetest")," directory and the respective config files."),(0,a.kt)("p",null,"To start both the Node.js app and Tracetest we will run this command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker-compose -f docker-compose.yaml -f tracetest/docker-compose.yaml up # add --build if the images are not built already\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"tracetest-config.yaml")," file contains the basic setup of connecting Tracetest to the Postgres instance."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"postgres:\n  host: postgres\n  user: postgres\n  password: postgres\n  port: 5432\n  dbname: postgres\n  params: sslmode=disable\n\ntelemetry:\n  exporters:\n    collector:\n      serviceName: tracetest\n      sampling: 100 # 100%\n      exporter:\n        type: collector\n        collector:\n          endpoint: otel-collector:4317\n\nserver:\n  telemetry:\n    exporter: collector\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"tracetest.provision.yaml")," file defines the trace data store, set to Jaeger, meaning the traces will be stored in Jaeger and Tracetest will fetch them from Jaeger when running tests."),(0,a.kt)("p",null,"But how does Tracetest fetch traces?"),(0,a.kt)("p",null,"Tracetest uses ",(0,a.kt)("inlineCode",{parentName:"p"},"jaeger:16685")," to connect to Jaeger and fetch trace data."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"---\ntype: PollingProfile\nspec:\n  name: Default\n  strategy: periodic\n  default: true\n  periodic:\n    retryDelay: 5s\n    timeout: 10m\n\n---\ntype: DataStore\nspec:\n  name: Jaeger\n  type: jaeger\n  default: true\n  jaeger:\n    endpoint: jaeger:16685\n    tls:\n      insecure: true\n")),(0,a.kt)("p",null,"How do traces reach Jaeger?"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"collector.config.yaml")," explains that. It receives traces via either ",(0,a.kt)("inlineCode",{parentName:"p"},"grpc")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"http"),". Then, exports them to Jaegers's ",(0,a.kt)("inlineCode",{parentName:"p"},"model.proto")," endpoint ",(0,a.kt)("inlineCode",{parentName:"p"},"jaeger:14250"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"receivers:\n  otlp:\n    protocols:\n      grpc:\n      http:\n\nprocessors:\n  batch:\n    timeout: 100ms\n\nexporters:\n  logging:\n    loglevel: debug\n  jaeger:\n    endpoint: jaeger:14250\n    tls:\n      insecure: true\n\nservice:\n  pipelines:\n    traces/1:\n      receivers: [otlp]\n      processors: [batch]\n      exporters: [jaeger]\n")),(0,a.kt)("h2",{id:"run-both-the-nodejs-app-and-tracetest"},"Run Both the Node.js App and Tracetest"),(0,a.kt)("p",null,"To start both the Node.js app and Tracetest, we will run this command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker-compose -f docker-compose.yaml -f tracetest/docker-compose.yaml up # add --build if the images are not built already\n")),(0,a.kt)("p",null,"This will start your Tracetest instance on ",(0,a.kt)("inlineCode",{parentName:"p"},"http://localhost:11633/"),"."),(0,a.kt)("p",null,"Open the URL and start creating tests! Make sure to use the ",(0,a.kt)("inlineCode",{parentName:"p"},"http://app:8080/")," URL in your test creation, because your Node.js app and Tracetest are in the same network."),(0,a.kt)("h2",{id:"learn-more"},"Learn More"),(0,a.kt)("p",null,"Feel free to check out our ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/kubeshop/tracetest/tree/main/examples"},"examples in GitHub")," and join our ",(0,a.kt)("a",{parentName:"p",href:"https://discord.gg/8MtcMrQNbX"},"Discord Community")," for more info!"))}m.isMDXComponent=!0}}]);