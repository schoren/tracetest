"use strict";(self.webpackChunktracetest_docs=self.webpackChunktracetest_docs||[]).push([[4014],{3905:(t,e,n)=>{n.d(e,{Zo:()=>m,kt:()=>h});var a=n(67294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function l(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function i(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},o=Object.keys(t);for(a=0;a<o.length;a++)n=o[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);for(a=0;a<o.length;a++)n=o[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var s=a.createContext({}),p=function(t){var e=a.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):l(l({},e),t)),n},m=function(t){var e=p(t.components);return a.createElement(s.Provider,{value:e},t.children)},u="mdxType",c={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},d=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,o=t.originalType,s=t.parentName,m=i(t,["components","mdxType","originalType","parentName"]),u=p(n),d=r,h=u["".concat(s,".").concat(d)]||u[d]||c[d]||o;return n?a.createElement(h,l(l({ref:e},m),{},{components:n})):a.createElement(h,l({ref:e},m))}));function h(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var o=n.length,l=new Array(o);l[0]=d;var i={};for(var s in e)hasOwnProperty.call(e,s)&&(i[s]=e[s]);i.originalType=t,i[u]="string"==typeof t?t:r,l[1]=i;for(var p=2;p<o;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},18679:(t,e,n)=>{n.d(e,{Z:()=>l});var a=n(67294),r=n(86010);const o={tabItem:"tabItem_Ymn6"};function l(t){let{children:e,hidden:n,className:l}=t;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o.tabItem,l),hidden:n},e)}},73992:(t,e,n)=>{n.d(e,{Z:()=>v});var a=n(87462),r=n(67294),o=n(86010),l=n(72957),i=n(16550),s=n(75238),p=n(33609),m=n(92560);function u(t){return function(t){return r.Children.map(t,(t=>{if(!t||(0,r.isValidElement)(t)&&function(t){const{props:e}=t;return!!e&&"object"==typeof e&&"value"in e}(t))return t;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof t.type?t.type:t.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(t).map((t=>{let{props:{value:e,label:n,attributes:a,default:r}}=t;return{value:e,label:n,attributes:a,default:r}}))}function c(t){const{values:e,children:n}=t;return(0,r.useMemo)((()=>{const t=e??u(n);return function(t){const e=(0,p.l)(t,((t,e)=>t.value===e.value));if(e.length>0)throw new Error(`Docusaurus error: Duplicate values "${e.map((t=>t.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(t),t}),[e,n])}function d(t){let{value:e,tabValues:n}=t;return n.some((t=>t.value===e))}function h(t){let{queryString:e=!1,groupId:n}=t;const a=(0,i.k6)(),o=function(t){let{queryString:e=!1,groupId:n}=t;if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,s._X)(o),(0,r.useCallback)((t=>{if(!o)return;const e=new URLSearchParams(a.location.search);e.set(o,t),a.replace({...a.location,search:e.toString()})}),[o,a])]}function y(t){const{defaultValue:e,queryString:n=!1,groupId:a}=t,o=c(t),[l,i]=(0,r.useState)((()=>function(t){let{defaultValue:e,tabValues:n}=t;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!d({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map((t=>t.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const a=n.find((t=>t.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:e,tabValues:o}))),[s,p]=h({queryString:n,groupId:a}),[u,y]=function(t){let{groupId:e}=t;const n=function(t){return t?`docusaurus.tab.${t}`:null}(e),[a,o]=(0,m.Nk)(n);return[a,(0,r.useCallback)((t=>{n&&o.set(t)}),[n,o])]}({groupId:a}),g=(()=>{const t=s??u;return d({value:t,tabValues:o})?t:null})();(0,r.useLayoutEffect)((()=>{g&&i(g)}),[g]);return{selectedValue:l,selectValue:(0,r.useCallback)((t=>{if(!d({value:t,tabValues:o}))throw new Error(`Can't select invalid tab value=${t}`);i(t),p(t),y(t)}),[p,y,o]),tabValues:o}}var g=n(51048);const k={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function f(t){let{className:e,block:n,selectedValue:i,selectValue:s,tabValues:p}=t;const m=[],{blockElementScrollPositionUntilNextRender:u}=(0,l.o5)(),c=t=>{const e=t.currentTarget,n=m.indexOf(e),a=p[n].value;a!==i&&(u(e),s(a))},d=t=>{let e=null;switch(t.key){case"Enter":c(t);break;case"ArrowRight":{const n=m.indexOf(t.currentTarget)+1;e=m[n]??m[0];break}case"ArrowLeft":{const n=m.indexOf(t.currentTarget)-1;e=m[n]??m[m.length-1];break}}e?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},e)},p.map((t=>{let{value:e,label:n,attributes:l}=t;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:i===e?0:-1,"aria-selected":i===e,key:e,ref:t=>m.push(t),onKeyDown:d,onClick:c},l,{className:(0,o.Z)("tabs__item",k.tabItem,l?.className,{"tabs__item--active":i===e})}),n??e)})))}function b(t){let{lazy:e,children:n,selectedValue:a}=t;const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const t=o.find((t=>t.props.value===a));return t?(0,r.cloneElement)(t,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},o.map(((t,e)=>(0,r.cloneElement)(t,{key:e,hidden:t.props.value!==a}))))}function N(t){const e=y(t);return r.createElement("div",{className:(0,o.Z)("tabs-container",k.tabList)},r.createElement(f,(0,a.Z)({},t,e)),r.createElement(b,(0,a.Z)({},t,e)))}function v(t){const e=(0,g.Z)();return r.createElement(N,(0,a.Z)({key:String(e)},t))}},65389:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>m,contentTitle:()=>s,default:()=>h,frontMatter:()=>i,metadata:()=>p,toc:()=>u});var a=n(87462),r=(n(67294),n(3905)),o=n(73992),l=n(18679);const i={id:"no-otel",title:"What if I don't have OpenTelemetry installed?",hide_table_of_contents:!0,description:"Tracetest allows you to quickly build integration and end-to-end tests, powered by your OpenTelemetry traces. Learn how to install OpenTelemetry in less than 5 minutes.",keywords:["tracetest","trace-based testing","observability","distributed tracing","testing"],image:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1689693872/docs/Blog_Thumbnail_28_ugy2yy.png"},s="What if I don't have OpenTelemetry installed?",p={unversionedId:"getting-started/no-otel",id:"getting-started/no-otel",title:"What if I don't have OpenTelemetry installed?",description:"Tracetest allows you to quickly build integration and end-to-end tests, powered by your OpenTelemetry traces. Learn how to install OpenTelemetry in less than 5 minutes.",source:"@site/docs/getting-started/no-otel.mdx",sourceDirName:"getting-started",slug:"/getting-started/no-otel",permalink:"/getting-started/no-otel",draft:!1,editUrl:"https://github.com/kubeshop/tracetest/blob/main/docs/docs/getting-started/no-otel.mdx",tags:[],version:"current",frontMatter:{id:"no-otel",title:"What if I don't have OpenTelemetry installed?",hide_table_of_contents:!0,description:"Tracetest allows you to quickly build integration and end-to-end tests, powered by your OpenTelemetry traces. Learn how to install OpenTelemetry in less than 5 minutes.",keywords:["tracetest","trace-based testing","observability","distributed tracing","testing"],image:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1689693872/docs/Blog_Thumbnail_28_ugy2yy.png"},sidebar:"tutorialSidebar",previous:{title:"Opening Tracetest",permalink:"/getting-started/open"},next:{title:"Configuration",permalink:"/configuration/overview"}},m={},u=[{value:"1. Install <code>cert-manager</code>",id:"1-install-cert-manager",level:2},{value:"This is required for the OpenTelemetry Operator to work.",id:"this-is-required-for-the-opentelemetry-operator-to-work",level:4},{value:"2. Install the OpenTelemetry Operator",id:"2-install-the-opentelemetry-operator",level:2},{value:"Traces will be generated and collected automatically.",id:"traces-will-be-generated-and-collected-automatically",level:4},{value:"3. Create a file named <code>otel-collector.yaml</code> for the OpenTelemetry config",id:"3-create-a-file-named-otel-collectoryaml-for-the-opentelemetry-config",level:2},{value:"1. The Instrumentation, which is an init-container that will run on any pod you explictly mark (see step 5).",id:"1-the-instrumentation-which-is-an-init-container-that-will-run-on-any-pod-you-explictly-mark-see-step-5",level:4},{value:"2. The OpenTelemetry collector, which will collect the traces from the init-container and send them to Tracetest, and/or your trace data store.",id:"2-the-opentelemetry-collector-which-will-collect-the-traces-from-the-init-container-and-send-them-to-tracetest-andor-your-trace-data-store",level:4},{value:"4. Apply the <code>otel-collector.yaml</code> config file",id:"4-apply-the-otel-collectoryaml-config-file",level:2},{value:"5. Update any service you want to instrument",id:"5-update-any-service-you-want-to-instrument",level:2},{value:"Odigos, is a new open source project that can do this for you without a single line of code.",id:"odigos-is-a-new-open-source-project-that-can-do-this-for-you-without-a-single-line-of-code",level:4}],c={toc:u},d="wrapper";function h(t){let{components:e,...n}=t;return(0,r.kt)(d,(0,a.Z)({},c,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"what-if-i-dont-have-opentelemetry-installed"},"What if I don't have OpenTelemetry installed?"),(0,r.kt)("p",null,"No worries! You can get started with no code changes at all!"),(0,r.kt)("p",null,"This page will explain getting started with OpenTelemetry:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Injecting auto instrumentation with ",(0,r.kt)("strong",{parentName:"li"},"no code changes"),"."),(0,r.kt)("li",{parentName:"ul"},"Auto instrumentation with limited code changes."),(0,r.kt)("li",{parentName:"ul"},"Manual instrumentation with code changes.")),(0,r.kt)("p",null,"You can also find more ways to instrument OpenTelemetry in their ",(0,r.kt)("a",{parentName:"p",href:"https://opentelemetry.io/docs/instrumentation/"},"documentation"),"."),(0,r.kt)(o.Z,{groupId:"otel-install-options",mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"no-code-changes",label:"No Code Changes",default:!0,mdxType:"TabItem"},(0,r.kt)("p",null,"You can install the OpenTelemetry Operator in any existing Kubernetes environment in under 5 minutes by running the following set of commands."),(0,r.kt)("h2",{id:"1-install-cert-manager"},"1. Install ",(0,r.kt)("a",{parentName:"h2",href:"https://cert-manager.io/"},(0,r.kt)("inlineCode",{parentName:"a"},"cert-manager"))),(0,r.kt)("h4",{id:"this-is-required-for-the-opentelemetry-operator-to-work"},"This is required for the OpenTelemetry Operator to work."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.11.0/cert-manager.yaml\n")),(0,r.kt)("h2",{id:"2-install-the-opentelemetry-operator"},"2. Install the ",(0,r.kt)("a",{parentName:"h2",href:"https://opentelemetry.io/docs/k8s-operator/"},"OpenTelemetry Operator")),(0,r.kt)("h4",{id:"traces-will-be-generated-and-collected-automatically"},"Traces will be generated and collected automatically."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl apply -f https://github.com/open-telemetry/opentelemetry-operator/releases/latest/download/opentelemetry-operator.yaml\n")),(0,r.kt)("h2",{id:"3-create-a-file-named-otel-collectoryaml-for-the-opentelemetry-config"},"3. Create a file named ",(0,r.kt)("inlineCode",{parentName:"h2"},"otel-collector.yaml")," for the OpenTelemetry config"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="otel-collector.yaml"',title:'"otel-collector.yaml"'},"apiVersion: opentelemetry.io/v1alpha1\nkind: Instrumentation\nmetadata:\nname: otel-instrumentation\nspec:\nexporter:\n    endpoint: http://otel-collector:4317\npropagators:\n    - tracecontext\n    - baggage\n    - b3\n\n---\napiVersion: opentelemetry.io/v1alpha1\nkind: OpenTelemetryCollector\nmetadata:\nname: otel\nspec:\nconfig: |\n  receivers:\n    otlp:\n      protocols:\n        grpc:\n        http:\n  processors:\n    batch:\n        timeout: 100ms\n  exporters:\n    otlp/tracetest:\n      endpoint: tracetest:4317\n      tls:\n        insecure: true\n  service:\n    pipelines:\n        traces:\n            receivers: [otlp]\n            processors: [batch]\n            exporters: [otlp/tracetest]\n")),(0,r.kt)("p",null,"You configure 2 separate things:"),(0,r.kt)("h4",{id:"1-the-instrumentation-which-is-an-init-container-that-will-run-on-any-pod-you-explictly-mark-see-step-5"},"1. The Instrumentation, which is an init-container that will run on any pod you explictly mark (see step 5)."),(0,r.kt)("h4",{id:"2-the-opentelemetry-collector-which-will-collect-the-traces-from-the-init-container-and-send-them-to-tracetest-andor-your-trace-data-store"},"2. The OpenTelemetry collector, which will collect the traces from the init-container and send them to Tracetest, and/or your trace data store."),(0,r.kt)("p",null,"What's amazing here is that you can add other exporters to this config file to ",(0,r.kt)("a",{parentName:"p",href:"/configuration/overview"},"send the traces to other services as explained here"),"."),(0,r.kt)("h2",{id:"4-apply-the-otel-collectoryaml-config-file"},"4. Apply the ",(0,r.kt)("inlineCode",{parentName:"h2"},"otel-collector.yaml")," config file"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Terminal"',title:'"Terminal"'},"kubectl apply -f otel-collector.yaml\n")),(0,r.kt)("h2",{id:"5-update-any-service-you-want-to-instrument"},"5. Update any service you want to instrument"),(0,r.kt)("p",null,"Use the ",(0,r.kt)("a",{parentName:"p",href:"https://opentelemetry.io/docs/k8s-operator/automatic/"},"following annotations as seen in the OpenTelemetry docs"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},".NET"),": ",(0,r.kt)("inlineCode",{parentName:"li"},'instrumentation.opentelemetry.io/inject-dotnet: "true"')),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Java"),": ",(0,r.kt)("inlineCode",{parentName:"li"},'instrumentation.opentelemetry.io/inject-java: "true"')),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Node.js"),": ",(0,r.kt)("inlineCode",{parentName:"li"},'instrumentation.opentelemetry.io/inject-nodejs: "true"')),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Python"),": ",(0,r.kt)("inlineCode",{parentName:"li"},'instrumentation.opentelemetry.io/inject-python: "true"'))),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Add an environment variable named ",(0,r.kt)("inlineCode",{parentName:"p"},"SERVICE_NAME")," to your service so that you can\nlater identify it in the tests.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"apiVersion: apps/v1\nkind: Deployment\nmetadata:\nname: your-service\nspec:\nreplicas: 1\ntemplate:\n  annotations:\n    instrumentation.opentelemetry.io/inject-nodejs: 'true'\nspec:\n    containers:\n      var:\n        - name: SERVICE_NAME\n          value: 'your-service'\n")),(0,r.kt)("p",null,"This will automatically instrument your service with OpenTelemetry and send the traces to the OpenTelemetry collector."),(0,r.kt)("p",null,"Apply the changes and you're ready! You can start writing integration and end-to-end tests with trace-based testing!"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Check the ",(0,r.kt)("a",{parentName:"p",href:"https://opentelemetry.io/docs/k8s-operator/automatic/"},"official OpenTelemetry docs")," explaining how to use the OpenTelemetry Operator."))),(0,r.kt)(l.Z,{value:"other-options",label:"Other Options",default:!0,mdxType:"TabItem"},(0,r.kt)("h4",{id:"odigos-is-a-new-open-source-project-that-can-do-this-for-you-without-a-single-line-of-code"},(0,r.kt)("a",{parentName:"h4",href:"https://docs.odigos.io/intro"},"Odigos"),", is a new open source project that can do this for you without a single line of code.")),(0,r.kt)(l.Z,{value:"auto-instrumentation",label:"Auto Instrumentation",default:!0,mdxType:"TabItem"},(0,r.kt)("p",null,"Below we provide quick links to all key docs and samples."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Language"),(0,r.kt)("th",{parentName:"tr",align:null},"Docs"),(0,r.kt)("th",{parentName:"tr",align:null},"GitHub"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"C#/.NET")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://opentelemetry.io/docs/instrumentation/net/automatic/"},"https://opentelemetry.io/docs/instrumentation/net/automatic/")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/open-telemetry/opentelemetry-dotnet-instrumentation"},"https://github.com/open-telemetry/opentelemetry-dotnet-instrumentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Java")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://opentelemetry.io/docs/instrumentation/java/automatic/"},"https://opentelemetry.io/docs/instrumentation/java/automatic/")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/open-telemetry/opentelemetry-java-instrumentation"},"https://github.com/open-telemetry/opentelemetry-java-instrumentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"JavaScript")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://opentelemetry.io/docs/instrumentation/js/automatic/"},"https://opentelemetry.io/docs/instrumentation/js/automatic/")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/open-telemetry/opentelemetry-js"},"https://github.com/open-telemetry/opentelemetry-js"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"PHP")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://opentelemetry.io/docs/instrumentation/php/automatic/"},"https://opentelemetry.io/docs/instrumentation/php/automatic/")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/open-telemetry/opentelemetry-php-instrumentation"},"https://github.com/open-telemetry/opentelemetry-php-instrumentation"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Python")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://opentelemetry.io/docs/instrumentation/python/automatic/"},"https://opentelemetry.io/docs/instrumentation/python/automatic/")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/open-telemetry/opentelemetry-python-contrib"},"https://github.com/open-telemetry/opentelemetry-python-contrib"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Ruby")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://opentelemetry.io/docs/instrumentation/ruby/automatic/"},"https://opentelemetry.io/docs/instrumentation/ruby/automatic/")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://github.com/open-telemetry/opentelemetry-ruby"},"https://github.com/open-telemetry/opentelemetry-ruby")))))),(0,r.kt)(l.Z,{value:"manual-instrumentation",label:"Manual Instrumentation",default:!0,mdxType:"TabItem"},(0,r.kt)("p",null,"Below we provide quick links to all key docs."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Language"),(0,r.kt)("th",{parentName:"tr",align:null},"Docs"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"C++")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://opentelemetry.io/docs/instrumentation/cpp/"},"https://opentelemetry.io/docs/instrumentation/cpp/"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"C#/.NET")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://opentelemetry.io/docs/instrumentation/net/"},"https://opentelemetry.io/docs/instrumentation/net/"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Erlang/Elixir")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://opentelemetry.io/docs/instrumentation/erlang/"},"https://opentelemetry.io/docs/instrumentation/erlang/"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Go")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://opentelemetry.io/docs/instrumentation/go/"},"https://opentelemetry.io/docs/instrumentation/go/"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Java")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://opentelemetry.io/docs/instrumentation/java/"},"https://opentelemetry.io/docs/instrumentation/java/"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"JavaScript")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://opentelemetry.io/docs/instrumentation/js/"},"https://opentelemetry.io/docs/instrumentation/js/"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"PHP")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://opentelemetry.io/docs/instrumentation/php/"},"https://opentelemetry.io/docs/instrumentation/php/"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Python")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://opentelemetry.io/docs/instrumentation/python/"},"https://opentelemetry.io/docs/instrumentation/python/"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Ruby")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://opentelemetry.io/docs/instrumentation/ruby/"},"https://opentelemetry.io/docs/instrumentation/ruby/"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Rust")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://opentelemetry.io/docs/instrumentation/rust/"},"https://opentelemetry.io/docs/instrumentation/rust/"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Swift")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://opentelemetry.io/docs/instrumentation/swift/"},"https://opentelemetry.io/docs/instrumentation/swift/"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Other")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"https://opentelemetry.io/docs/instrumentation/other/"},"https://opentelemetry.io/docs/instrumentation/other/"))))))),(0,r.kt)("admonition",{title:"We suggest you go back to and install Tracetest!",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Jump back to the ",(0,r.kt)("a",{parentName:"p",href:"/getting-started/installation"},"installation guide")," once you have OpenTelemetry installed.")))}h.isMDXComponent=!0}}]);