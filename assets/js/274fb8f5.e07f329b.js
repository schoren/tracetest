"use strict";(self.webpackChunktracetest_docs=self.webpackChunktracetest_docs||[]).push([[6256],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>y});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),c=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(a),m=r,y=u["".concat(s,".").concat(m)]||u[m]||d[m]||o;return a?n.createElement(y,l(l({ref:t},p),{},{components:a})):n.createElement(y,l({ref:t},p))}));function y(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,l=new Array(o);l[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[u]="string"==typeof e?e:r,l[1]=i;for(var c=2;c<o;c++)l[c]=a[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},48763:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var n=a(87462),r=(a(67294),a(3905));const o={},l="Defining Data Stores as Text Files",i={unversionedId:"cli/creating-data-stores",id:"cli/creating-data-stores",title:"Defining Data Stores as Text Files",description:"You might have multiple Tracetest instances that need to be connected to the same data stores. An easy way of sharing the configuration is by using a configuration file that can be applied to your Tracetest instance.",source:"@site/docs/cli/creating-data-stores.md",sourceDirName:"cli",slug:"/cli/creating-data-stores",permalink:"/cli/creating-data-stores",draft:!1,editUrl:"https://github.com/kubeshop/tracetest/blob/main/docs/docs/cli/creating-data-stores.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Configuring your CLI",permalink:"/cli/configuring-your-cli"},next:{title:"Defining Tests as Text Files",permalink:"/cli/creating-tests"}},s={},c=[{value:"Supported Trace Data Stores",id:"supported-trace-data-stores",level:2},{value:"Jaeger",id:"jaeger",level:3},{value:"OpenSearch",id:"opensearch",level:3},{value:"Elastic APM",id:"elastic-apm",level:3},{value:"SignalFX",id:"signalfx",level:3},{value:"Tempo",id:"tempo",level:3},{value:"Lightstep",id:"lightstep",level:3},{value:"New Relic",id:"new-relic",level:3},{value:"AWS X-Ray",id:"aws-x-ray",level:3},{value:"Datadog",id:"datadog",level:3},{value:"Dynatrace",id:"dynatrace",level:3},{value:"Honeycomb",id:"honeycomb",level:3},{value:"Using the OpenTelemetry Collector",id:"using-the-opentelemetry-collector",level:3},{value:"Apply Configuration",id:"apply-configuration",level:2},{value:"Additional Information",id:"additional-information",level:2}],p={toc:c},u="wrapper";function d(e){let{components:t,...a}=e;return(0,r.kt)(u,(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"defining-data-stores-as-text-files"},"Defining Data Stores as Text Files"),(0,r.kt)("p",null,"You might have multiple Tracetest instances that need to be connected to the same data stores. An easy way of sharing the configuration is by using a configuration file that can be applied to your Tracetest instance."),(0,r.kt)("h2",{id:"supported-trace-data-stores"},"Supported Trace Data Stores"),(0,r.kt)("h3",{id:"jaeger"},"Jaeger"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"type: DataStore\nspec:\n  name: Jaeger\n  type: jaeger\n  default: true\n  jaeger:\n    endpoint: jaeger:16685\n    tls:\n      insecure: true\n")),(0,r.kt)("h3",{id:"opensearch"},"OpenSearch"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"type: DataStore\nspec:\n  name: OpenSearch\n  type: opensearch\n  default: true\n  opensearch:\n    addresses:\n      - http://opensearch:9200\n    index: traces\n")),(0,r.kt)("h3",{id:"elastic-apm"},"Elastic APM"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"type: DataStore\nspec:\n  name: Elastic APM\n  type: elasticapm\n  default: true\n  elasticapm:\n    addresses:\n      - https://es01:9200\n    username: elastic\n    password: changeme\n    index: traces-apm-default\n    insecureSkipVerify: true\n")),(0,r.kt)("h3",{id:"signalfx"},"SignalFX"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"type: DataStore\nspec:\n  name: SignalFX\n  type: signalfx\n  default: true\n  signalfx:\n    realm: us1\n    token: mytoken\n")),(0,r.kt)("h3",{id:"tempo"},"Tempo"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"type: DataStore\nspec:\n  name: Grafana Tempo\n  type: tempo\n  default: true\n  tempo:\n    endpoint: tempo:9095\n    tls:\n      insecure: true\n")),(0,r.kt)("h3",{id:"lightstep"},"Lightstep"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"type: DataStore\nspec:\n  name: Lightstep pipeline\n  type: lightstep\n  default: true\n")),(0,r.kt)("h3",{id:"new-relic"},"New Relic"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"type: DataStore\nspec:\n  name: New Relic pipeline\n  type: newrelic\n  default: true\n")),(0,r.kt)("h3",{id:"aws-x-ray"},"AWS X-Ray"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'type: DataStore\nspec:\n  name: AWS X-Ray\n  type: awsxray\n  default: true\n  awsxray:\n    accessKeyId: <your-accessKeyId>\n    secretAccessKey: <your-secretAccessKey>\n    sessionToken: <your-session-token>\n    region: "us-west-2"\n')),(0,r.kt)("h3",{id:"datadog"},"Datadog"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"type: DataStore\nspec:\n  name: Datadog pipeline\n  type: datadog\n  default: true\n")),(0,r.kt)("h3",{id:"dynatrace"},"Dynatrace"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"type: DataStore\nspec:\n  name: Dynatrace pipeline\n  type: dynatrace\n  default: true\n")),(0,r.kt)("h3",{id:"honeycomb"},"Honeycomb"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"type: DataStore\nspec:\n  name: Honeycomb pipeline\n  type: honeycomb\n  default: true\n")),(0,r.kt)("h3",{id:"using-the-opentelemetry-collector"},"Using the OpenTelemetry Collector"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"type: DataStore\nspec:\n  name: Opentelemetry Collector pipeline\n  type: otlp\n  default: true\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Consider reading about ",(0,r.kt)("a",{parentName:"p",href:"/configuration/connecting-to-data-stores/opentelemetry-collector"},"how to use the OTEL collector")," to send traces to your Tracetest instance.")),(0,r.kt)("h2",{id:"apply-configuration"},"Apply Configuration"),(0,r.kt)("p",null,"To apply the configuration, you need a ",(0,r.kt)("a",{parentName:"p",href:"/cli/configuring-your-cli"},"configured CLI")," pointed to the instance you want to apply the data store. Then use the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"tracetest apply datastore -f my/data-store/file/location.yaml\n")),(0,r.kt)("h2",{id:"additional-information"},"Additional Information"),(0,r.kt)("p",null,"In the current version, you can only have one active data store at any given time. The flag ",(0,r.kt)("inlineCode",{parentName:"p"},"default")," defines which data store should be used by your tests. So, if you want to add a new data store and make sure it will be used in future test runs, make sure to define ",(0,r.kt)("inlineCode",{parentName:"p"},"default")," as ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," in the data store configuration file."),(0,r.kt)("p",null,"After a configuration is applied, you can export it using the CLI by using the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"tracetest export datastore -f my/file/location.yaml --id my-data-store-id\n")))}d.isMDXComponent=!0}}]);