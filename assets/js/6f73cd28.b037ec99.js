"use strict";(self.webpackChunktracetest_docs=self.webpackChunktracetest_docs||[]).push([[2289],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=l(n),h=a,m=u["".concat(p,".").concat(h)]||u[h]||d[h]||s;return n?r.createElement(m,o(o({ref:t},c),{},{components:n})):r.createElement(m,o({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,o=new Array(s);o[0]=h;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[u]="string"==typeof e?e:a,o[1]=i;for(var l=2;l<s;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},56863:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var r=n(87462),a=(n(67294),n(3905));const s={},o="Running Tracetest with Azure App Insights (ApplicationInsights Node.js SDK)",i={unversionedId:"examples-tutorials/recipes/running-tracetest-with-azure-app-insights",id:"examples-tutorials/recipes/running-tracetest-with-azure-app-insights",title:"Running Tracetest with Azure App Insights (ApplicationInsights Node.js SDK)",description:"Check out the source code on GitHub here.",source:"@site/docs/examples-tutorials/recipes/running-tracetest-with-azure-app-insights.md",sourceDirName:"examples-tutorials/recipes",slug:"/examples-tutorials/recipes/running-tracetest-with-azure-app-insights",permalink:"/examples-tutorials/recipes/running-tracetest-with-azure-app-insights",draft:!1,editUrl:"https://github.com/kubeshop/tracetest/blob/main/docs/docs/examples-tutorials/recipes/running-tracetest-with-azure-app-insights.md",tags:[],version:"current",frontMatter:{},sidebar:"examplesTutorialsSidebar",previous:{title:"Running Tracetest with AWS Step Functions, AWS X-Ray and Terraform",permalink:"/examples-tutorials/recipes/running-tracetest-with-step-functions-terraform"},next:{title:"Running Tracetest with Azure App Insights (Node.js + OpenTelemetry Collector)",permalink:"/examples-tutorials/recipes/running-tracetest-with-azure-app-insights-collector"}},p={},l=[{value:"Sample Node.js App with Azure App Insights and Tracetest",id:"sample-nodejs-app-with-azure-app-insights-and-tracetest",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Project Structure",id:"project-structure",level:2},{value:"1. Node.js App",id:"1-nodejs-app",level:3},{value:"2. Tracetest",id:"2-tracetest",level:3},{value:"Docker Compose Network",id:"docker-compose-network",level:3},{value:"Node.js App",id:"nodejs-app",level:2},{value:"Tracetest",id:"tracetest",level:2},{value:"Run Both the Node.js App and Tracetest",id:"run-both-the-nodejs-app-and-tracetest",level:2},{value:"Learn More",id:"learn-more",level:2}],c={toc:l},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"running-tracetest-with-azure-app-insights-applicationinsights-nodejs-sdk"},"Running Tracetest with Azure App Insights (ApplicationInsights Node.js SDK)"),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("a",{parentName:"p",href:"https://github.com/kubeshop/tracetest/tree/main/examples/tracetest-azure-app-insights"},"Check out the source code on GitHub here."))),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://tracetest.io/"},"Tracetest")," is a testing tool based on ",(0,a.kt)("a",{parentName:"p",href:"https://opentelemetry.io/"},"OpenTelemetry")," that allows you to test your distributed application. It allows you to use data from distributed traces generated by OpenTelemetry to validate and assert if your application has the desired behavior defined by your test definitions."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/azure/azure-monitor/app/app-insights-overview"},"Azure Application Insights")," is an extension of Azure Monitor and provides application performance monitoring (APM) features. APM tools are useful to monitor applications from development, through test, and into production in the following ways:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Proactively understand how an application is performing."),(0,a.kt)("li",{parentName:"ul"},"Reactively review application execution data to determine the cause of an incident.")),(0,a.kt)("h2",{id:"sample-nodejs-app-with-azure-app-insights-and-tracetest"},"Sample Node.js App with Azure App Insights and Tracetest"),(0,a.kt)("p",null,"This is a simple quick start guide on how to configure a Node.js app to use instrumentation with traces and Tracetest for enhancing your E2E and integration tests with trace-based testing. The infrastructure will use Azure App Insights as the trace data store and a Node.js app to generate the telemetry data."),(0,a.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,a.kt)("p",null,"You will need ",(0,a.kt)("a",{parentName:"p",href:"https://docs.docker.com/get-docker/"},"Docker")," and ",(0,a.kt)("a",{parentName:"p",href:"https://docs.docker.com/compose/install/"},"Docker Compose")," installed on your machine to run this quick start app!"),(0,a.kt)("p",null,"You will also need an ",(0,a.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/azure/azure-monitor/app/app-insights-azure-ad-api"},"App Insights API Access Key")," and the resource ARM ID for your App Insights instance."),(0,a.kt)("h2",{id:"project-structure"},"Project Structure"),(0,a.kt)("p",null,"The project is built with Docker Compose."),(0,a.kt)("h3",{id:"1-nodejs-app"},"1. Node.js App"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"Dockerfile")," in the root directory is for the Node.js app."),(0,a.kt)("h3",{id:"2-tracetest"},"2. Tracetest"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," file, ",(0,a.kt)("inlineCode",{parentName:"p"},"tracetest.provision.yaml"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"tracetest-config.yaml")," in the ",(0,a.kt)("inlineCode",{parentName:"p"},"root")," directory are for the setting up the Node.js App and Tracetest."),(0,a.kt)("h3",{id:"docker-compose-network"},"Docker Compose Network"),(0,a.kt)("p",null,"All ",(0,a.kt)("inlineCode",{parentName:"p"},"services")," in the ",(0,a.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," are on the same network and will be reachable by hostname from within other services."),(0,a.kt)("h2",{id:"nodejs-app"},"Node.js App"),(0,a.kt)("p",null,"The Node.js app is a simple Express app, contained in the ",(0,a.kt)("inlineCode",{parentName:"p"},"src/index.js")," file."),(0,a.kt)("p",null,"It is instrumented using the ",(0,a.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/applicationinsights"},"applicationinsights SDK")," wrapping the application code to send telemetry data directly to the Azure cloud."),(0,a.kt)("p",null,"The following is the code instrumentation section from the ",(0,a.kt)("inlineCode",{parentName:"p"},"src/tracing.js")," file."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'const {\n  ApplicationInsightsClient,\n  ApplicationInsightsConfig,\n} = require("applicationinsights");\nconst {\n  ExpressInstrumentation,\n} = require("@opentelemetry/instrumentation-express");\nconst { HttpInstrumentation } = require("@opentelemetry/instrumentation-http");\n\nconst config = new ApplicationInsightsConfig();\nconfig.azureMonitorExporterConfig.connectionString = process.env.CONNECTION_STRING;\n\nconst appInsights = new ApplicationInsightsClient(config);\n\nconst traceHandler = appInsights.getTraceHandler();\ntraceHandler.addInstrumentation(new ExpressInstrumentation());\ntraceHandler.addInstrumentation(new HttpInstrumentation());\n')),(0,a.kt)("p",null,"To start the server, run this command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm start\n")),(0,a.kt)("p",null,"As you can see the ",(0,a.kt)("inlineCode",{parentName:"p"},"Dockerfile")," uses the command above."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Dockerfile"},'FROM node:slim\nWORKDIR /usr/src/app\n\nCOPY ./src/package*.json ./\n\nRUN npm install\nCOPY ./src .\n\nEXPOSE 3000\nCMD [ "npm", "start" ]\n')),(0,a.kt)("h2",{id:"tracetest"},"Tracetest"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," includes two other services."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Postgres")," - Postgres is a prerequisite for Tracetest to work. It stores trace data when running the trace-based tests."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://tracetest.io/"},(0,a.kt)("strong",{parentName:"a"},"Tracetest"))," - Trace-based testing that generates end-to-end tests automatically from traces.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'services:\n  postgres:\n    environment:\n      POSTGRES_PASSWORD: postgres\n      POSTGRES_USER: postgres\n    healthcheck:\n      test:\n        - CMD-SHELL\n        - pg_isready -U "$$POSTGRES_USER" -d "$$POSTGRES_DB"\n      timeout: 5s\n      interval: 1s\n      retries: 60\n    image: postgres:14\n    networks:\n      default: null\n  tracetest:\n    command: --provisioning-file /app/provision.yaml\n    platform: linux/amd64\n    depends_on:\n      postgres:\n        condition: service_healthy\n    environment:\n      TRACETEST_DEV: ${TRACETEST_DEV}\n    extra_hosts:\n      host.docker.internal: host-gateway\n    healthcheck:\n      test:\n        - CMD\n        - wget\n        - --spider\n        - localhost:11633\n      timeout: 3s\n      interval: 1s\n      retries: 60\n    image: kubeshop/tracetest:${TAG:-latest}\n    networks:\n      default: null\n    ports:\n      - mode: ingress\n        target: 11633\n        published: 11633\n        protocol: tcp\n    volumes:\n      - type: bind\n        source: tracetest/tracetest.yaml\n        target: /app/tracetest.yaml\n      - type: bind\n        source: tracetest/tracetest-provision.yaml\n        target: /app/provision.yaml\nnetworks:\n  default:\n    name: _default\n')),(0,a.kt)("p",null,"Tracetest depends on Postgres and requires config files to be loaded via a volume. The volumes are mapped from the root directory into the ",(0,a.kt)("inlineCode",{parentName:"p"},"root")," directory and the respective config files."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"tracetest.config.yaml")," file contains the basic setup of connecting Tracetest to the Postgres instance."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"postgres:\n  host: postgres\n  user: postgres\n  password: postgres\n  port: 5432\n  dbname: postgres\n  params: sslmode=disable\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"tracetest.provision.yaml")," file defines the trace data store, set to Azure App Insights, meaning the traces will be stored in App Insights and Tracetest will fetch them from when running tests."),(0,a.kt)("p",null,"But how does Tracetest fetch traces?"),(0,a.kt)("p",null,"Tracetest uses the Golang ",(0,a.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/azure/developer/go/"},"Azure SDK")," library to pull to fetch trace data."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"type: DataStore\nspec:\n  name: AzureAppInsights\n  type: azureappinsights\n  default: true\n  azureappinsights:\n    connectionType: direct\n    resourceArmId: <your-arm-id>\n    accessToken: <your-access-token>\n    useAzureActiveDirectoryAuth: false\n")),(0,a.kt)("p",null,"How do traces reach Azure App Insights?"),(0,a.kt)("p",null,"The application code in the ",(0,a.kt)("inlineCode",{parentName:"p"},"src/tracing.js")," file uses the native App Insights library which sends telemetry straight to the Azure Cloud."),(0,a.kt)("h2",{id:"run-both-the-nodejs-app-and-tracetest"},"Run Both the Node.js App and Tracetest"),(0,a.kt)("p",null,"To start both the Node.js app and Tracetest, run this command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker compose -f ./docker-compose.yaml -f ./tracetest/docker-compose.yaml up -d\n")),(0,a.kt)("p",null,"This will start your Tracetest instance on ",(0,a.kt)("inlineCode",{parentName:"p"},"http://localhost:11633/"),". Open it and start creating tests!\nMake sure to use the ",(0,a.kt)("inlineCode",{parentName:"p"},"http://app:3000/")," URL in your test creation because your Node.js app and Tracetest are in the same network."),(0,a.kt)("h2",{id:"learn-more"},"Learn More"),(0,a.kt)("p",null,"Please visit our ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/kubeshop/tracetest/tree/main/examples"},"examples in GitHub")," and join our ",(0,a.kt)("a",{parentName:"p",href:"https://discord.gg/8MtcMrQNbX"},"Discord Community")," for more info!"))}d.isMDXComponent=!0}}]);