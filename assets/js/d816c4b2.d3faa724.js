"use strict";(self.webpackChunktracetest_docs=self.webpackChunktracetest_docs||[]).push([[6312],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(n),d=r,h=u["".concat(l,".").concat(d)]||u[d]||m[d]||o;return n?a.createElement(h,s(s({ref:t},c),{},{components:n})):a.createElement(h,s({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[u]="string"==typeof e?e:r,s[1]=i;for(var p=2;p<o;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},40877:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const o={},s="Running Tracetest without a Trace Data Store with Manual Instrumentation",i={unversionedId:"examples-tutorials/recipes/running-tracetest-without-a-trace-data-store-with-manual-instrumentation",id:"examples-tutorials/recipes/running-tracetest-without-a-trace-data-store-with-manual-instrumentation",title:"Running Tracetest without a Trace Data Store with Manual Instrumentation",description:"Check out the source code on GitHub here.",source:"@site/docs/examples-tutorials/recipes/running-tracetest-without-a-trace-data-store-with-manual-instrumentation.md",sourceDirName:"examples-tutorials/recipes",slug:"/examples-tutorials/recipes/running-tracetest-without-a-trace-data-store-with-manual-instrumentation",permalink:"/examples-tutorials/recipes/running-tracetest-without-a-trace-data-store-with-manual-instrumentation",draft:!1,editUrl:"https://github.com/kubeshop/tracetest/blob/main/docs/docs/examples-tutorials/recipes/running-tracetest-without-a-trace-data-store-with-manual-instrumentation.md",tags:[],version:"current",frontMatter:{},sidebar:"examplesTutorialsSidebar",previous:{title:"Running Tracetest without a Trace Data Store",permalink:"/examples-tutorials/recipes/running-tracetest-without-a-trace-data-store"},next:{title:"Running a Python app with OpenTelemetry manual instrumention",permalink:"/examples-tutorials/recipes/running-python-app-with-opentelemetry-collector-and-tracetest"}},l={},p=[{value:"Sample Node.js app with OpenTelemetry and Tracetest that Includes Manual Instrumentation",id:"sample-nodejs-app-with-opentelemetry-and-tracetest-that-includes-manual-instrumentation",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Project Structure",id:"project-structure",level:2},{value:"1. Node.js App",id:"1-nodejs-app",level:3},{value:"2. Tracetest",id:"2-tracetest",level:3},{value:"Docker Compose Network",id:"docker-compose-network",level:3},{value:"Node.js App",id:"nodejs-app",level:2},{value:"Tracetest",id:"tracetest",level:2},{value:"Run Both the Node.js App and Tracetest",id:"run-both-the-nodejs-app-and-tracetest",level:2},{value:"Run Tracetest Tests with the Tracetest CLI",id:"run-tracetest-tests-with-the-tracetest-cli",level:2}],c={toc:p},u="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"running-tracetest-without-a-trace-data-store-with-manual-instrumentation"},"Running Tracetest without a Trace Data Store with Manual Instrumentation"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{parentName:"p",href:"https://github.com/kubeshop/tracetest/tree/main/examples/quick-start-nodejs-manual-instrumentation"},"Check out the source code on GitHub here."))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://tracetest.io/"},"Tracetest")," is a testing tool based on ",(0,r.kt)("a",{parentName:"p",href:"https://opentelemetry.io/"},"OpenTelemetry")," that allows you to test your distributed application. It allows you to use data from distributed traces generated by OpenTelemetry to validate and assert if your application has the desired behavior defined by your test definitions."),(0,r.kt)("h2",{id:"sample-nodejs-app-with-opentelemetry-and-tracetest-that-includes-manual-instrumentation"},"Sample Node.js app with OpenTelemetry and Tracetest that Includes Manual Instrumentation"),(0,r.kt)("p",null,"This is a simple quick start on how to configure a Node.js app to use OpenTelemetry instrumentation with traces, and Tracetest for enhancing your E2E and integration tests with trace-based testing. This example includes manual instrumentation and a sample bookstore array that simulates fetching data from a database."),(0,r.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("p",null,"You will need ",(0,r.kt)("a",{parentName:"p",href:"https://docs.docker.com/get-docker/"},"Docker")," and ",(0,r.kt)("a",{parentName:"p",href:"https://docs.docker.com/compose/install/"},"Docker Compose")," installed on your machine to run this quick start app!"),(0,r.kt)("h2",{id:"project-structure"},"Project Structure"),(0,r.kt)("p",null,"The project is built with Docker Compose. It contains two distinct ",(0,r.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," files."),(0,r.kt)("h3",{id:"1-nodejs-app"},"1. Node.js App"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," file and ",(0,r.kt)("inlineCode",{parentName:"p"},"Dockerfile")," in the root directory are for the Node.js app."),(0,r.kt)("h3",{id:"2-tracetest"},"2. Tracetest"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," file, ",(0,r.kt)("inlineCode",{parentName:"p"},"collector.config.yaml"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"tracetest-provision.yaml"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"tracetest.config.yaml")," in the ",(0,r.kt)("inlineCode",{parentName:"p"},"tracetest")," directory are for the setting up Tracetest and the OpenTelemetry Collector."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"tracetest")," directory is self-contained and will run all the prerequisites for enabling OpenTelemetry traces and trace-based testing with Tracetest."),(0,r.kt)("h3",{id:"docker-compose-network"},"Docker Compose Network"),(0,r.kt)("p",null,"All ",(0,r.kt)("inlineCode",{parentName:"p"},"services")," in the ",(0,r.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," are on the same network and will be reachable by hostname from within other services. E.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"tracetest:4317")," in the ",(0,r.kt)("inlineCode",{parentName:"p"},"collector.config.yaml")," will map to the ",(0,r.kt)("inlineCode",{parentName:"p"},"tracetest")," service, where the port ",(0,r.kt)("inlineCode",{parentName:"p"},"4317")," is the port where Tracetest accepts traces."),(0,r.kt)("h2",{id:"nodejs-app"},"Node.js App"),(0,r.kt)("p",null,"The Node.js app is a simple Express app with two microservices, contained in the ",(0,r.kt)("inlineCode",{parentName:"p"},"app.js")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"availability.js")," files."),(0,r.kt)("p",null,"The OpenTelemetry tracing is contained in the ",(0,r.kt)("inlineCode",{parentName:"p"},"tracing.otel.grpc.js")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"tracing.otel.http.js")," files, respectively.\nTraces will be sent to the OpenTelemetry Collector."),(0,r.kt)("p",null,"Here's the content of the ",(0,r.kt)("inlineCode",{parentName:"p"},"tracing.otel.grpc.js")," file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const opentelemetry = require("@opentelemetry/sdk-node");\nconst {\n  getNodeAutoInstrumentations,\n} = require("@opentelemetry/auto-instrumentations-node");\nconst {\n  OTLPTraceExporter,\n} = require("@opentelemetry/exporter-trace-otlp-grpc");\nconst { Resource } = require("@opentelemetry/resources");\nconst {\n  SemanticResourceAttributes,\n} = require("@opentelemetry/semantic-conventions");\nconst { NodeTracerProvider } = require("@opentelemetry/sdk-trace-node");\nconst { BatchSpanProcessor } = require("@opentelemetry/sdk-trace-base");\n\nconst resource = Resource.default().merge(\n  new Resource({\n    [SemanticResourceAttributes.SERVICE_NAME]:\n      "quick-start-nodejs-manual-instrumentation",\n    [SemanticResourceAttributes.SERVICE_VERSION]: "0.0.1",\n  })\n);\n\nconst provider = new NodeTracerProvider({ resource: resource });\nconst exporter = new OTLPTraceExporter({ url: "http://otel-collector:4317" });\nconst processor = new BatchSpanProcessor(exporter);\nprovider.addSpanProcessor(processor);\nprovider.register();\n\nconst sdk = new opentelemetry.NodeSDK({\n  traceExporter: exporter,\n  instrumentations: [getNodeAutoInstrumentations()],\n  serviceName: "quick-start-nodejs-manual-instrumentation",\n});\nsdk.start();\n')),(0,r.kt)("p",null,"Depending on which of these you choose, traces will be sent to either the ",(0,r.kt)("inlineCode",{parentName:"p"},"grpc")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"http")," endpoint."),(0,r.kt)("p",null,"The hostnames and ports for these are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"GRPC: ",(0,r.kt)("inlineCode",{parentName:"li"},"http://otel-collector:4317")),(0,r.kt)("li",{parentName:"ul"},"HTTP: ",(0,r.kt)("inlineCode",{parentName:"li"},"http://otel-collector:4318/v1/traces"))),(0,r.kt)("p",null,"Enabling the tracer is done by preloading the trace file."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"node -r ./tracing.otel.grpc.js app.js\n")),(0,r.kt)("p",null,"In the ",(0,r.kt)("inlineCode",{parentName:"p"},"package.json")," you will see two npm scripts for running the respective tracers alongside the ",(0,r.kt)("inlineCode",{parentName:"p"},"app.js"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'"scripts": {\n  "app-with-grpc-tracer": "node -r ./tracing.otel.grpc.js app.js",\n  "app-with-http-tracer": "node -r ./tracing.otel.http.js app.js",\n  "availability-with-grpc-tracer": "node -r ./tracing.otel.grpc.js availability.js",\n  "availability-with-http-tracer": "node -r ./tracing.otel.http.js availability.js"\n},\n')),(0,r.kt)("p",null,"To start the ",(0,r.kt)("inlineCode",{parentName:"p"},"app.js")," Express server, run this command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm run app-with-grpc-tracer\n# or\nnpm run app-with-http-tracer\n")),(0,r.kt)("p",null,"To start the ",(0,r.kt)("inlineCode",{parentName:"p"},"availability.js")," Express server, run this command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm run availability-with-grpc-tracer\n# or\nnpm run availability-with-http-tracer\n")),(0,r.kt)("p",null,"As you can see the ",(0,r.kt)("inlineCode",{parentName:"p"},"Dockerfile")," does not have a ",(0,r.kt)("inlineCode",{parentName:"p"},"CMD")," section."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-Dockerfile"},"FROM node:slim\nWORKDIR /usr/src/app\nCOPY package*.json ./\nRUN npm install\nCOPY . .\nEXPOSE 8080\n")),(0,r.kt)("p",null,"Instead, the ",(0,r.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," contains the ",(0,r.kt)("inlineCode",{parentName:"p"},"CMD")," section for both services."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'version: "3"\nservices:\n  app:\n    image: quick-start-nodejs\n    build: .\n    command: npm run app-with-grpc-tracer\n    ports:\n      - "8080:8080"\n  availability:\n    image: quick-start-nodejs-availability\n    build: .\n    command: npm run availability-with-grpc-tracer\n    ports:\n      - "8080"\n')),(0,r.kt)("p",null,"To start it, run this command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker compose build # optional if you haven't already built the image\ndocker compose up\n")),(0,r.kt)("p",null,"This will start the Node.js app. But, you're not sending the traces anywhere."),(0,r.kt)("p",null,"Let's fix this by configuring Tracetest and OpenTelemetry Collector."),(0,r.kt)("h2",{id:"tracetest"},"Tracetest"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," in the ",(0,r.kt)("inlineCode",{parentName:"p"},"tracetest")," directory is configured with three services."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Postgres")," - Postgres is a prerequisite for Tracetest to work. It stores trace data when running the trace-based tests."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://opentelemetry.io/docs/collector/"},(0,r.kt)("strong",{parentName:"a"},"OpenTelemetry Collector"))," - A vendor-agnostic implementation of how to receive, process and export telemetry data."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://tracetest.io/"},(0,r.kt)("strong",{parentName:"a"},"Tracetest"))," - Trace-based testing that generates end-to-end tests automatically from traces.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'version: "3"\nservices:\n  tracetest:\n    image: kubeshop/tracetest:latest\n    platform: linux/amd64\n    volumes:\n      - type: bind\n        source: ./tracetest/tracetest-config.yaml\n        target: /app/tracetest.yaml\n      - type: bind\n        source: ./tracetest/tracetest-provision.yaml\n        target: /app/provisioning.yaml\n    ports:\n      - 11633:11633\n    command: --provisioning-file /app/provisioning.yaml\n    depends_on:\n      postgres:\n        condition: service_healthy\n      otel-collector:\n        condition: service_started\n    healthcheck:\n      test: ["CMD", "wget", "--spider", "localhost:11633"]\n      interval: 1s\n      timeout: 3s\n      retries: 60\n    environment:\n      TRACETEST_DEV: ${TRACETEST_DEV}\n\n  postgres:\n    image: postgres:14\n    environment:\n      POSTGRES_PASSWORD: postgres\n      POSTGRES_USER: postgres\n    healthcheck:\n      test: pg_isready -U "$$POSTGRES_USER" -d "$$POSTGRES_DB"\n      interval: 1s\n      timeout: 5s\n      retries: 60\n\n  otel-collector:\n    image: otel/opentelemetry-collector-contrib:0.59.0\n    command:\n      - "--config"\n      - "/otel-local-config.yaml"\n    volumes:\n      - ./tracetest/collector.config.yaml:/otel-local-config.yaml\n')),(0,r.kt)("p",null,"Tracetest depends on both Postgres and the OpenTelemetry Collector. Both Tracetest and the OpenTelemetry Collector require config files to be loaded via a volume. The volumes are mapped from the root directory into the ",(0,r.kt)("inlineCode",{parentName:"p"},"tracetest")," directory and the respective config files."),(0,r.kt)("p",null,"To start both the Node.js services and Tracetest we will run this command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker-compose -f docker-compose.yaml -f tracetest/docker-compose.yaml up # add --build if the images are not built already\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"tracetest-config.yaml")," file contains the basic setup of connecting Tracetest to the Postgres instance."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"postgres:\n  host: postgres\n  user: postgres\n  password: postgres\n  port: 5432\n  dbname: postgres\n  params: sslmode=disable\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"tracetest-provision.yaml")," file provisions the trace data store and polling to store in the Postgres database. The data store is set to OTLP meaning the traces will be stored in Tracetest itself."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"---\ntype: PollingProfile\nspec:\n  name: Default\n  strategy: periodic\n  default: true\n  periodic:\n    retryDelay: 5s\n    timeout: 10m\n\n---\ntype: DataStore\nspec:\n  name: OpenTelemetry Collector\n  type: otlp\n  default: true\n")),(0,r.kt)("p",null,"But how are traces sent to Tracetest?"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"collector.config.yaml")," explains that. It receives traces via either ",(0,r.kt)("inlineCode",{parentName:"p"},"grpc")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"http"),". Then, exports them to Tracetest's OLTP endpoint ",(0,r.kt)("inlineCode",{parentName:"p"},"tracetest:4317"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"receivers:\n  otlp:\n    protocols:\n      grpc:\n      http:\n\nprocessors:\n  batch:\n    timeout: 100ms\n\nexporters:\n  logging:\n    loglevel: debug\n  otlp/1:\n    endpoint: tracetest:4317\n    # Send traces to Tracetest.\n    # Read more in docs here: https://docs.tracetest.io/configuration/connecting-to-data-stores/opentelemetry-collector\n    tls:\n      insecure: true\n\nservice:\n  pipelines:\n    traces/1:\n      receivers: [otlp]\n      processors: [batch]\n      exporters: [otlp/1]\n")),(0,r.kt)("h2",{id:"run-both-the-nodejs-app-and-tracetest"},"Run Both the Node.js App and Tracetest"),(0,r.kt)("p",null,"To start both the Node.js services and Tracetest we will run this command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker-compose -f docker-compose.yaml -f tracetest/docker-compose.yaml up # add --build if the images are not built already\n")),(0,r.kt)("p",null,"This will start your Tracetest instance on ",(0,r.kt)("inlineCode",{parentName:"p"},"http://localhost:11633/"),". "),(0,r.kt)("p",null,"Open the URL and ",(0,r.kt)("a",{parentName:"p",href:"https://docs.tracetest.io/web-ui/creating-tests"},"start creating tests in the Web UI"),"! Make sure to use the ",(0,r.kt)("inlineCode",{parentName:"p"},"http://app:8080/books")," URL in your test creation, because your Node.js app and Tracetest are in the same network."),(0,r.kt)("p",null,"Here's a sample of a failed test run, which happens if you add this assertion:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-css"},"attr: books.list.count = 4;\n")),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1673808310/screely-1673808287031_sol4it.png",alt:"assertion"})),(0,r.kt)("p",null,"It fails because of the ",(0,r.kt)("inlineCode",{parentName:"p"},"books.length")," is equal to ",(0,r.kt)("inlineCode",{parentName:"p"},"3"),"."),(0,r.kt)("h2",{id:"run-tracetest-tests-with-the-tracetest-cli"},"Run Tracetest Tests with the Tracetest CLI"),(0,r.kt)("p",null,"First, ",(0,r.kt)("a",{parentName:"p",href:"https://docs.tracetest.io/getting-started/installation#install-the-tracetest-cli"},"install the CLI"),".\nThen, configure the CLI:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"tracetest configure --endpoint http://localhost:11633\n")),(0,r.kt)("p",null,"Once configured, you can run a test against the Tracetest instance via the terminal."),(0,r.kt)("p",null,"Check out the ",(0,r.kt)("inlineCode",{parentName:"p"},"test-api.yaml")," file."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'type: Test\nspec:\n  id: W656Q0c4g\n  name: Books List\n  description: List of books\n  trigger:\n    type: http\n    httpRequest:\n      url: http://app:8080/books\n      method: GET\n      headers:\n        - key: Content-Type\n          value: application/json\n  specs:\n    - selector: span[tracetest.span.type="http" name="GET /books" http.target="/books" http.method="GET"]\n      assertions:\n        - attr:http.status_code = 200\n    - selector: span[tracetest.span.type="general" name="Books List"]\n      assertions:\n        - attr:books.list.count = 4\n')),(0,r.kt)("p",null,"This file defines the a test the same way you would through the Web UI."),(0,r.kt)("p",null,"To run the test, run this command in the terminal:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"tracetest run test -f ./test-api.yaml\n")),(0,r.kt)("p",null,"This test will fail just like the sample above due to the ",(0,r.kt)("inlineCode",{parentName:"p"},"attr:books.list.count = 4")," assertion."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'\u2718 http://app:8080 (http://localhost:11633/test/W656Q0c4g/run/5/test)\n    \u2714 span[tracetest.span.type="http" name="GET /books" http.target="/books" http.method="GET"]\n        \u2714 #994c63e0ea35e632\n            \u2714 attr:http.status_code = 200 (200)\n    \u2718 span[tracetest.span.type="general" name="Books List"]\n        \u2718 #5ab1856c32b0d5c8\n            \u2718 attr:books.list.count = 4 (3) (http://localhost:11633/test/W656Q0c4g/run/5/test?selectedAssertion=1&selectedSpan=5ab1856c32b0d5c8)\n')),(0,r.kt)("p",null,"The tests will pass if you change the assertion to:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-css"},"attr: books.list.count = 3;\n")),(0,r.kt)("p",null,"Feel free to check out our ",(0,r.kt)("a",{parentName:"p",href:"https://docs.tracetest.io/"},"docs")," and join our ",(0,r.kt)("a",{parentName:"p",href:"https://discord.gg/8MtcMrQNbX"},"Discord Community")," for more info!"))}m.isMDXComponent=!0}}]);