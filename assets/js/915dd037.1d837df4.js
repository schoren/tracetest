"use strict";(self.webpackChunktracetest_docs=self.webpackChunktracetest_docs||[]).push([[7013],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),l=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(i.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),m=l(n),h=a,u=m["".concat(i,".").concat(h)]||m[h]||d[h]||o;return n?r.createElement(u,s(s({ref:t},c),{},{components:n})):r.createElement(u,s({ref:t},c))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=h;var p={};for(var i in t)hasOwnProperty.call(t,i)&&(p[i]=t[i]);p.originalType=e,p[m]="string"==typeof e?e:a,s[1]=p;for(var l=2;l<o;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},25445:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>p,toc:()=>l});var r=n(87462),a=(n(67294),n(3905));const o={},s="Running Tracetest With Lightstep",p={unversionedId:"examples-tutorials/recipes/running-tracetest-with-lightstep",id:"examples-tutorials/recipes/running-tracetest-with-lightstep",title:"Running Tracetest With Lightstep",description:"Check out the source code on GitHub here.",source:"@site/docs/examples-tutorials/recipes/running-tracetest-with-lightstep.md",sourceDirName:"examples-tutorials/recipes",slug:"/examples-tutorials/recipes/running-tracetest-with-lightstep",permalink:"/examples-tutorials/recipes/running-tracetest-with-lightstep",draft:!1,editUrl:"https://github.com/kubeshop/tracetest/blob/main/docs/docs/examples-tutorials/recipes/running-tracetest-with-lightstep.md",tags:[],version:"current",frontMatter:{},sidebar:"examplesTutorialsSidebar",previous:{title:"Running a Python app with OpenTelemetry manual instrumention",permalink:"/examples-tutorials/recipes/running-python-app-with-opentelemetry-collector-and-tracetest"},next:{title:"Running Tracetest With New Relic",permalink:"/examples-tutorials/recipes/running-tracetest-with-new-relic"}},i={},l=[{value:"OpenTelemetry Demo <code>v0.3.4-alpha</code> with Lightstep, OpenTelemetry and Tracetest",id:"opentelemetry-demo-v034-alpha-with-lightstep-opentelemetry-and-tracetest",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Project Structure",id:"project-structure",level:2},{value:"1. OpenTelemetry Demo",id:"1-opentelemetry-demo",level:3},{value:"2. Tracetest",id:"2-tracetest",level:3},{value:"Docker Compose Network",id:"docker-compose-network",level:3},{value:"OpenTelemetry Demo",id:"opentelemetry-demo",level:2},{value:"Tracetest",id:"tracetest",level:2},{value:"Run Both the OpenTelemetry Demo App and Tracetest",id:"run-both-the-opentelemetry-demo-app-and-tracetest",level:2},{value:"Run Tracetest Tests with the Tracetest CLI",id:"run-tracetest-tests-with-the-tracetest-cli",level:2},{value:"View Trace Spans Over Time in Lightstep",id:"view-trace-spans-over-time-in-lightstep",level:2},{value:"Learn More",id:"learn-more",level:2}],c={toc:l},m="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"running-tracetest-with-lightstep"},"Running Tracetest With Lightstep"),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},(0,a.kt)("a",{parentName:"p",href:"https://github.com/kubeshop/tracetest/tree/main/examples/tracetest-lightstep"},"Check out the source code on GitHub here."))),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://tracetest.io/"},"Tracetest")," is a testing tool based on ",(0,a.kt)("a",{parentName:"p",href:"https://opentelemetry.io/"},"OpenTelemetry")," that allows you to test your distributed application. It allows you to use data from distributed traces generated by OpenTelemetry to validate and assert if your application has the desired behavior defined by your test definitions."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://lightstep.com/"},"Lightstep")," is a distributed tracing solution created by the founders of the OpenTelemetry (and OpenTracing) projects. It provides integrated distributed tracing, logs and metrics solution and fully supports OpenTelemetry standards."),(0,a.kt)("h2",{id:"opentelemetry-demo-v034-alpha-with-lightstep-opentelemetry-and-tracetest"},"OpenTelemetry Demo ",(0,a.kt)("inlineCode",{parentName:"h2"},"v0.3.4-alpha")," with Lightstep, OpenTelemetry and Tracetest"),(0,a.kt)("p",null,"This is a simple sample app on how to configure the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/open-telemetry/opentelemetry-demo"},"OpenTelemetry Demo ",(0,a.kt)("inlineCode",{parentName:"a"},"v0.3.4-alpha"))," to use ",(0,a.kt)("a",{parentName:"p",href:"https://tracetest.io/"},"Tracetest")," for enhancing your E2E and integration tests with trace-based testing and ",(0,a.kt)("a",{parentName:"p",href:"https://lightstep.com/"},"Lightstep")," as a trace data store."),(0,a.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,a.kt)("p",null,"You will need ",(0,a.kt)("a",{parentName:"p",href:"https://docs.docker.com/get-docker/"},"Docker")," and ",(0,a.kt)("a",{parentName:"p",href:"https://docs.docker.com/compose/install/"},"Docker Compose")," installed on your machine to run this sample app! Additionally, you will need a Lightstep account and access token. Sign up to use Lightstep ",(0,a.kt)("a",{parentName:"p",href:"https://app.lightstep.com/signup/developer"},"here"),"."),(0,a.kt)("h2",{id:"project-structure"},"Project Structure"),(0,a.kt)("p",null,"The project is built with Docker Compose. It contains two distinct ",(0,a.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," files."),(0,a.kt)("h3",{id:"1-opentelemetry-demo"},"1. OpenTelemetry Demo"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," file and ",(0,a.kt)("inlineCode",{parentName:"p"},".env")," file in the root directory are for the OpenTelemetry Demo."),(0,a.kt)("h3",{id:"2-tracetest"},"2. Tracetest"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," file, ",(0,a.kt)("inlineCode",{parentName:"p"},"collector.config.yaml"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"tracetest-provision.yaml"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"tracetest-config.yaml")," in the ",(0,a.kt)("inlineCode",{parentName:"p"},"tracetest")," directory are for the setting up Tracetest and the OpenTelemetry Collector."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"tracetest")," directory is self-contained and will run all the prerequisites for enabling OpenTelemetry traces and trace-based testing with Tracetest, as well as routing all traces the OpenTelemetry Demo generates to Lightstep."),(0,a.kt)("h3",{id:"docker-compose-network"},"Docker Compose Network"),(0,a.kt)("p",null,"All ",(0,a.kt)("inlineCode",{parentName:"p"},"services")," in the ",(0,a.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," are on the same network and will be reachable by hostname from within other services. E.g. ",(0,a.kt)("inlineCode",{parentName:"p"},"tracetest:4317")," in the ",(0,a.kt)("inlineCode",{parentName:"p"},"collector.config.yaml")," will map to the ",(0,a.kt)("inlineCode",{parentName:"p"},"tracetest")," service, where the port ",(0,a.kt)("inlineCode",{parentName:"p"},"4317")," is the port where Tracetest accepts traces."),(0,a.kt)("h2",{id:"opentelemetry-demo"},"OpenTelemetry Demo"),(0,a.kt)("p",null,"The ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/open-telemetry/opentelemetry-demo"},"OpenDelemetry Demo")," is a sample microservice-based app with the purpose to demo how to correctly set up OpenTelemetry distributed tracing."),(0,a.kt)("p",null,"Read more about the OpenTelemetry Demo ",(0,a.kt)("a",{parentName:"p",href:"https://opentelemetry.io/blog/2022/announcing-opentelemetry-demo-release/"},"here"),"."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," contains 12 services."),(0,a.kt)("p",null,"To start the OpenTelemetry Demo by itself, run this command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker compose build # optional if you haven't already built the images\ndocker compose up\n")),(0,a.kt)("p",null,"This will start the OpenTelemetry Demo. Open up ",(0,a.kt)("inlineCode",{parentName:"p"},"http://localhost:8084")," to make sure it's working. But, you're not sending the traces anywhere."),(0,a.kt)("p",null,"Let's fix this by configuring Tracetest and OpenTelemetry Collector to forward trace data to both Lightstep and Tracetest."),(0,a.kt)("h2",{id:"tracetest"},"Tracetest"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," in the ",(0,a.kt)("inlineCode",{parentName:"p"},"tracetest")," directory is configured with three services."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"Postgres")," - Postgres is a prerequisite for Tracetest to work. It stores trace data when running the trace-based tests."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://opentelemetry.io/docs/collector/"},(0,a.kt)("strong",{parentName:"a"},"OpenTelemetry Collector"))," - A vendor-agnostic implementation of how to receive, process and export telemetry data."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://tracetest.io/"},(0,a.kt)("strong",{parentName:"a"},"Tracetest"))," - Trace-based testing that generates end-to-end tests automatically from traces.")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'version: "3.2"\nservices:\n  tracetest:\n    restart: unless-stopped\n    image: kubeshop/tracetest:${TAG:-latest}\n    platform: linux/amd64\n    ports:\n      - 11633:11633\n    extra_hosts:\n      - "host.docker.internal:host-gateway"\n    volumes:\n      - type: bind\n        source: ./tracetest/tracetest-config.yaml\n        target: /app/tracetest.yaml\n      - type: bind\n        source: ./tracetest/tracetest-provision.yaml\n        target: /app/provision.yaml\n    command: --provisioning-file /app/provision.yaml\n    healthcheck:\n      test: ["CMD", "wget", "--spider", "localhost:11633"]\n      interval: 1s\n      timeout: 3s\n      retries: 60\n    depends_on:\n      postgres:\n        condition: service_healthy\n      otel-collector:\n        condition: service_started\n    environment:\n      TRACETEST_DEV: ${TRACETEST_DEV}\n\n  postgres:\n    image: postgres:14\n    environment:\n      POSTGRES_PASSWORD: postgres\n      POSTGRES_USER: postgres\n    healthcheck:\n      test: pg_isready -U "$$POSTGRES_USER" -d "$$POSTGRES_DB"\n      interval: 1s\n      timeout: 5s\n      retries: 60\n\n  otel-collector:\n    image: otel/opentelemetry-collector-contrib:0.68.0\n    restart: unless-stopped\n    command:\n      - "--config"\n      - "/otel-local-config.yaml"\n    volumes:\n      - ./tracetest/collector.config.yaml:/otel-local-config.yaml\n\n')),(0,a.kt)("p",null,"Tracetest depends on both Postgres and the OpenTelemetry Collector. Both Tracetest and the OpenTelemetry Collector require config files to be loaded via a volume. The volumes are mapped from the root directory into the ",(0,a.kt)("inlineCode",{parentName:"p"},"tracetest")," directory and the respective config files."),(0,a.kt)("p",null,"To start both the OpenTelemetry Demo and Tracetest, run this command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker-compose -f docker-compose.yaml -f tracetest/docker-compose.yaml up # add --build if the images are not built already\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"tracetest-config.yaml")," file contains the basic setup of connecting Tracetest to the Postgres instance and defining the exporter. The exporter is set to the OpenTelemetry Collector."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"# tracetest-config.yaml\n\n---\npostgres:\n  host: postgres\n  user: postgres\n  password: postgres\n  port: 5432\n  dbname: postgres\n  params: sslmode=disable\n\ntelemetry:\n  exporters:\n    collector:\n      serviceName: tracetest\n      sampling: 100\n      exporter:\n        type: collector\n        collector:\n          endpoint: otel-collector:4317\n\nserver:\n  telemetry:\n    exporter: collector\n    applicationExporter: collector\n\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"tracetest-provision.yaml")," file contains the data store setup. The data store is set to ",(0,a.kt)("inlineCode",{parentName:"p"},"lightstep")," meaning the traces will be received by Tracetest OTLP API and stored in Tracetest itself."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'# tracetest-provision.yaml\n---\ntype: DataStore\nspec:\n  name: Lightstep\n  type: lightstep\n\n---\ntype: Demo\nspec:\n  name: "OpenTelemetry Shop"\n  enabled: true\n  type: otelstore\n  opentelemetryStore:\n    frontendEndpoint: http://otel-frontend:8084\n    productCatalogEndpoint: otel-productcatalogservice:3550\n    cartEndpoint: otel-cartservice:7070\n    checkoutEndpoint: otel-checkoutservice:5050\n\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"How to Send Traces to Tracetest and Lightstep")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"collector.config.yaml")," explains that. It receives traces via either ",(0,a.kt)("inlineCode",{parentName:"p"},"grpc")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"http"),". Then, exports them to Tracetest's OTLP endpoint ",(0,a.kt)("inlineCode",{parentName:"p"},"tracetest:4317")," in one pipeline, and to Lightstep in another."),(0,a.kt)("p",null,"Make sure to add your Lightstep access token in the headers of the ",(0,a.kt)("inlineCode",{parentName:"p"},"otlp/lightstep")," exporter."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'receivers:\n  otlp:\n    protocols:\n      grpc:\n      http:\n\nprocessors:\n  batch:\n    timeout: 100ms\n\nexporters:\n  logging:\n    logLevel: debug\n  # OTLP for Tracetest\n  otlp/tracetest:\n    endpoint: tracetest:4317 # Send traces to Tracetest. Read more in docs here: https://docs.tracetest.io/configuration/connecting-to-data-stores/opentelemetry-collector\n    tls:\n      insecure: true\n  # OTLP for Lightstep\n  otlp/lightstep:\n    endpoint: ingest.lightstep.com:443\n    headers:\n      "lightstep-access-token": "<your-lightstep-access-token>" # Send traces to Lightstep. Read more in docs here: https://docs.lightstep.com/otel/otel-quick-start\n\nservice:\n  pipelines:\n    traces/tracetest:\n      receivers: [otlp]\n      processors: [batch]\n      exporters: [otlp/tracetest]\n    traces/lightstep:\n      receivers: [otlp]\n      processors: [batch]\n      exporters: [logging, otlp/lightstep]\n')),(0,a.kt)("h2",{id:"run-both-the-opentelemetry-demo-app-and-tracetest"},"Run Both the OpenTelemetry Demo App and Tracetest"),(0,a.kt)("p",null,"To start both the OpenTelemetry and Tracetest, run this command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"docker-compose -f docker-compose.yaml -f tracetest/docker-compose.yaml up # add --build if the images are not built already\n")),(0,a.kt)("p",null,"This will start your Tracetest instance on ",(0,a.kt)("inlineCode",{parentName:"p"},"http://localhost:11633/"),"."),(0,a.kt)("p",null,"Open the URL and ",(0,a.kt)("a",{parentName:"p",href:"https://docs.tracetest.io/web-ui/creating-tests"},"start creating tests in the Web UI"),"! Make sure to use the endpoints within your Docker network like ",(0,a.kt)("inlineCode",{parentName:"p"},"http://otel-frontend:8084/")," when creating tests."),(0,a.kt)("p",null,"This is because your OpenTelemetry Demo and Tracetest are in the same network."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Note: View the ",(0,a.kt)("inlineCode",{parentName:"p"},"demo")," section in the ",(0,a.kt)("inlineCode",{parentName:"p"},"tracetest.config.yaml")," to see which endpoints from the OpenTelemetry Demo are available for running tests.")),(0,a.kt)("p",null,"Here's a sample of a failed test run, which happens if you add this assertion:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-css"},"attr:tracetest.span.duration  < 50ms\n")),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1672998179/Blogposts/tracetest-lightstep-partnership/screely-1672998159326_depw45.png",alt:"failing test"})),(0,a.kt)("p",null,"Increasing the duration to a more reasonable ",(0,a.kt)("inlineCode",{parentName:"p"},"500ms")," will make the test pass."),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1672998252/Blogposts/tracetest-lightstep-partnership/screely-1672998249450_mngghb.png",alt:"passing test"})),(0,a.kt)("h2",{id:"run-tracetest-tests-with-the-tracetest-cli"},"Run Tracetest Tests with the Tracetest CLI"),(0,a.kt)("p",null,"First, ",(0,a.kt)("a",{parentName:"p",href:"https://docs.tracetest.io/getting-started/installation#install-the-tracetest-cli"},"install the CLI"),".\nThen, configure the CLI:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"tracetest configure --endpoint http://localhost:11633\n")),(0,a.kt)("p",null,"Once configured, you can run a test against the Tracetest instance via the terminal."),(0,a.kt)("p",null,"Check out the ",(0,a.kt)("inlineCode",{parentName:"p"},"http-test.yaml")," file."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'# http-test.yaml\n\ntype: Test\nspec:\n  id: YJmFC7hVg\n  name: Otel - List Products\n  description: Otel - List Products\n  trigger:\n    type: http\n    httpRequest:\n      url: http://otel-frontend:8084/api/products\n      method: GET\n      headers:\n        - key: Content-Type\n          value: application/json\n  specs:\n    - selector:\n        span[tracetest.span.type="http" name="API HTTP GET" http.target="/api/products"\n        http.method="GET"]\n      assertions:\n        - attr:http.status_code   =   200\n        - attr:tracetest.span.duration  <  50ms\n    - selector: span[tracetest.span.type="rpc" name="grpc.hipstershop.ProductCatalogService/ListProducts"]\n      assertions:\n        - attr:rpc.grpc.status_code = 0\n    - selector:\n        span[tracetest.span.type="rpc" name="hipstershop.ProductCatalogService/ListProducts"\n        rpc.system="grpc" rpc.method="ListProducts" rpc.service="hipstershop.ProductCatalogService"]\n      assertions:\n        - attr:rpc.grpc.status_code = 0\n')),(0,a.kt)("p",null,"This file defines the a test the same way you would through the Web UI."),(0,a.kt)("p",null,"To run the test, run this command in the terminal:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"tracetest run test -f ./http-test.yaml\n")),(0,a.kt)("p",null,"This test will fail just like the sample above due to the ",(0,a.kt)("inlineCode",{parentName:"p"},"attr:tracetest.span.duration  <  50ms")," assertion."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'\u2718 Otel - List Products (http://localhost:11633/test/YJmFC7hVg/run/9/test)\n    \u2718 span[tracetest.span.type="http" name="API HTTP GET" http.target="/api/products" http.method="GET"]\n        \u2718 #cb68ccf586956db7\n            \u2714 attr:http.status_code   =   200 (200)\n            \u2718 attr:tracetest.span.duration  <  50ms (72ms) (http://localhost:11633/test/YJmFC7hVg/run/9/test?selectedAssertion=0&selectedSpan=cb68ccf586956db7)\n    \u2714 span[tracetest.span.type="rpc" name="grpc.hipstershop.ProductCatalogService/ListProducts"]\n        \u2714 #634f965d1b34c1fd\n            \u2714 attr:rpc.grpc.status_code = 0 (0)\n    \u2714 span[tracetest.span.type="rpc" name="hipstershop.ProductCatalogService/ListProducts" rpc.system="grpc" rpc.method="ListProducts" rpc.service="hipstershop.ProductCatalogService"]\n        \u2714 #33a58e95448d8b22\n            \u2714 attr:rpc.grpc.status_code = 0 (0)\n')),(0,a.kt)("p",null,"If you edit the duration as in the Web UI example above, the test will pass!"),(0,a.kt)("h2",{id:"view-trace-spans-over-time-in-lightstep"},"View Trace Spans Over Time in Lightstep"),(0,a.kt)("p",null,"To access a historical overview of all the trace spans the OpenTelemetry Demo generates, jump over to your Lightstep account."),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1672998664/Blogposts/tracetest-lightstep-partnership/screely-1672998658856_lae7ml.png",alt:"lightstep trace overview"})),(0,a.kt)("p",null,"You can also drill down into a particular trace."),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1672998974/Blogposts/tracetest-lightstep-partnership/screely-1672998969770_iwmjy5.png",alt:"lightstep trace drilldown"})),(0,a.kt)("p",null,"With Lightstep and Tracetest, you get the best of both worlds. You can run trace-based tests and automate running E2E and integration tests against real trace data. And, use Lightstep to get a historical overview of all traces your distributed application generates."),(0,a.kt)("h2",{id:"learn-more"},"Learn More"),(0,a.kt)("p",null,"Feel free to check out our ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/kubeshop/tracetest/tree/main/examples"},"examples in GitHub")," and join our ",(0,a.kt)("a",{parentName:"p",href:"https://discord.gg/8MtcMrQNbX"},"Discord Community")," for more info!"))}d.isMDXComponent=!0}}]);