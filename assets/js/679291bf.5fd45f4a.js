"use strict";(self.webpackChunktracetest_docs=self.webpackChunktracetest_docs||[]).push([[8298],{3905:(e,t,r)=>{r.d(t,{Zo:()=>l,kt:()=>m});var n=r(67294);function s(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function p(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){s(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,s=function(e,t){if(null==e)return{};var r,n,s={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(s[r]=e[r]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(s[r]=e[r])}return s}var i=n.createContext({}),c=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):p(p({},t),e)),r},l=function(e){var t=c(e.components);return n.createElement(i.Provider,{value:t},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,s=e.mdxType,a=e.originalType,i=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),u=c(r),d=s,m=u["".concat(i,".").concat(d)]||u[d]||h[d]||a;return r?n.createElement(m,p(p({ref:t},l),{},{components:r})):n.createElement(m,p({ref:t},l))}));function m(e,t){var r=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var a=r.length,p=new Array(a);p[0]=d;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o[u]="string"==typeof e?e:s,p[1]=o;for(var c=2;c<a;c++)p[c]=r[c];return n.createElement.apply(null,p)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},25283:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>p,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var n=r(87462),s=(r(67294),r(3905));const a={},p="OpenTelemetry Store - User Purchasing Products",o={unversionedId:"live-examples/opentelemetry-store/use-cases/user-purchasing-products",id:"live-examples/opentelemetry-store/use-cases/user-purchasing-products",title:"OpenTelemetry Store - User Purchasing Products",description:"In this use case, we want to validate the following story:",source:"@site/docs/live-examples/opentelemetry-store/use-cases/user-purchasing-products.md",sourceDirName:"live-examples/opentelemetry-store/use-cases",slug:"/live-examples/opentelemetry-store/use-cases/user-purchasing-products",permalink:"/live-examples/opentelemetry-store/use-cases/user-purchasing-products",draft:!1,editUrl:"https://github.com/kubeshop/tracetest/blob/main/docs/docs/live-examples/opentelemetry-store/use-cases/user-purchasing-products.md",tags:[],version:"current",frontMatter:{},sidebar:"liveExamplesSidebar",previous:{title:"OpenTelemetry Store - Get recommended products",permalink:"/live-examples/opentelemetry-store/use-cases/get-recommended-products"},next:{title:"Pokeshop API",permalink:"/live-examples/pokeshop/overview"}},i={},c=[{value:"Building a Test Suite for This Scenario",id:"building-a-test-suite-for-this-scenario",level:2},{value:"Mapping Environment Variables",id:"mapping-environment-variables",level:3},{value:"Creating Tests",id:"creating-tests",level:3},{value:"Creating the Test Suite",id:"creating-the-test-suite",level:3}],l={toc:c},u="wrapper";function h(e){let{components:t,...r}=e;return(0,s.kt)(u,(0,n.Z)({},l,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"opentelemetry-store---user-purchasing-products"},"OpenTelemetry Store - User Purchasing Products"),(0,s.kt)("p",null,"In this use case, we want to validate the following story:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"As a consumer, after landing at home page\nI want to see the shop recommended products, add the first one to my cart and pay for it on checkout\nSo I can have it shipped to my home\n")),(0,s.kt)("p",null,"Something interesting about this process is that it is a composition of many of the previous use cases, executed in sequence:"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("a",{parentName:"li",href:"/live-examples/opentelemetry-store/use-cases/get-recommended-products"},"Get Recommended Products")),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("a",{parentName:"li",href:"/live-examples/opentelemetry-store/use-cases/add-item-into-shopping-cart"},"Add Item into Shopping Cart")),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("a",{parentName:"li",href:"/live-examples/opentelemetry-store/use-cases/check-shopping-cart-contents"},"Check Shopping Cart Contents")),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("a",{parentName:"li",href:"/live-examples/opentelemetry-store/use-cases/checkout"},"Checkout"))),(0,s.kt)("p",null,"So in this case, we need to trigger four tests in sequence to achieve test the entire scenario and make these tests share data."),(0,s.kt)("h2",{id:"building-a-test-suite-for-this-scenario"},"Building a Test Suite for This Scenario"),(0,s.kt)("p",null,"Using Tracetest, we can do that by ",(0,s.kt)("a",{parentName:"p",href:"/web-ui/creating-tests"},"creating a test")," for each step and later grouping these tests as ",(0,s.kt)("a",{parentName:"p",href:"/web-ui/creating-test-suites"},"Test Suites")," that have an ",(0,s.kt)("a",{parentName:"p",href:"/concepts/variable-sets"},"variable set"),"]."),(0,s.kt)("p",null,"We can do that by creating the tests and Test Suites through the Web UI or using the CLI. In this example, we will use the CLI to create a Variable Set and then create the Test Suite with all tests needed. The ",(0,s.kt)("a",{parentName:"p",href:"/concepts/assertions"},"assertions")," that we will check are the same for every single test."),(0,s.kt)("h3",{id:"mapping-environment-variables"},"Mapping Environment Variables"),(0,s.kt)("p",null,"The first thing that we need to think about is to map the variables that are needed in this process. At first glance, we can identify the vars to the API address and the user ID:\nWith these variables, we can create the following definition file as saving as ",(0,s.kt)("inlineCode",{parentName:"p"},"user-buying-products.env"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sh"},"OTEL_API_URL=http://otel-shop-demo-frontend:8080/api\nUSER_ID=2491f868-88f1-4345-8836-d5d8511a9f83\n")),(0,s.kt)("h3",{id:"creating-tests"},"Creating Tests"),(0,s.kt)("p",null,"After creating the environment file, we will create a test for each step, starting with ",(0,s.kt)("a",{parentName:"p",href:"/live-examples/opentelemetry-store/use-cases/get-recommended-products"},"Get Recommended Products"),", which will be saved as ",(0,s.kt)("inlineCode",{parentName:"p"},"get-recommended-products.yaml"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},'type: Test\nspec:\n  name: Get recommended products\n  trigger:\n    type: http\n    httpRequest:\n      url: ${var:OTEL_API_URL}/recommendations?productIds=&sessionId=${var:USER_ID}&currencyCode=\n      method: GET\n      headers:\n      - key: Content-Type\n        value: application/json\n  specs:\n  - selector: span[tracetest.span.type="rpc" name="grpc.hipstershop.ProductCatalogService/GetProduct" rpc.system="grpc" rpc.method="GetProduct" rpc.service="hipstershop.ProductCatalogService"]\n    assertions: # It should have 4 products on this list.\n    - attr:tracetest.selected_spans.count = 4\n  - selector: span[tracetest.span.type="rpc" name="/hipstershop.FeatureFlagService/GetFlag" rpc.system="grpc" rpc.method="GetFlag" rpc.service="hipstershop.FeatureFlagService"]\n    assertions: # The feature flagger should be called for one product.\n    - attr:tracetest.selected_spans.count = 1\n  outputs:\n  - name: PRODUCT_ID\n    selector: span[tracetest.span.type="general" name="Tracetest trigger"]\n    value: attr:tracetest.response.body | json_path \'$[0].id\'\n')),(0,s.kt)("p",null,"Note that we have one important changes here: we are now using environment variables on the definition, like ",(0,s.kt)("inlineCode",{parentName:"p"},"${var:OTEL_API_URL}")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"${var:USER_ID}")," on the trigger section and an output to fetch the first ",(0,s.kt)("inlineCode",{parentName:"p"},"${var:PRODUCT_ID}")," that the user chose. This new environment variable will be used in the next tests."),(0,s.kt)("p",null,"The next step is to define the ",(0,s.kt)("a",{parentName:"p",href:"/live-examples/opentelemetry-store/use-cases/add-item-into-shopping-cart"},"Add Item into Shopping Cart")," test, which will be saved as ",(0,s.kt)("inlineCode",{parentName:"p"},"add-product-into-shopping-cart.yaml"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},'type: Test\nspec:\n  name: Add product into shopping cart\n  description: Add a selected product to user shopping cart\n  trigger:\n    type: http\n    httpRequest:\n      url: ${var:OTEL_API_URL}/cart\n      method: POST\n      headers:\n      - key: Content-Type\n        value: application/json\n      body: \'{"item":{"productId":"${var:PRODUCT_ID}","quantity":1},"userId":"${var:USER_ID}"}\'\n  specs:\n  - selector: span[tracetest.span.type="http" name="hipstershop.CartService/AddItem"]\n    # The correct ProductID was sent to the Product Catalog API.\n    assertions:\n    - attr:app.product.id = "${var:PRODUCT_ID}"\n  - selector: span[tracetest.span.type="database" name="HMSET" db.system="redis" db.redis.database_index="0"]\n    # The product persisted correctly on the shopping cart.\n    assertions:\n    - attr:tracetest.selected_spans.count >= 1\n')),(0,s.kt)("p",null,"After that, we will ",(0,s.kt)("a",{parentName:"p",href:"/live-examples/opentelemetry-store/use-cases/check-shopping-cart-contents"},"Check Shopping Cart Contents")," (on ",(0,s.kt)("inlineCode",{parentName:"p"},"check-shopping-cart-contents.yaml"),"), simulating a user validating the products selected before finishing the purchase:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},'type: Test\nspec:\n  name: Check shopping cart contents\n  trigger:\n    type: http\n    httpRequest:\n      url: ${var:OTEL_API_URL}/cart?sessionId=${var:USER_ID}&currencyCode=\n      method: GET\n      headers:\n      - key: Content-Type\n        value: application/json\n  specs:\n  - selector: span[tracetest.span.type="rpc" name="hipstershop.ProductCatalogService/GetProduct" rpc.system="grpc" rpc.method="GetProduct" rpc.service="hipstershop.ProductCatalogService"]\n    # The product previously added exists in the cart.\n    assertions:\n    - attr:app.product.id = "${var:PRODUCT_ID}"\n  - selector: span[tracetest.span.type="general" name="Tracetest trigger"]\n    # The size of the shopping cart should be at least 1.\n    assertions:\n    - attr:tracetest.response.body | json_path \'$.items.length\' >= 1\n')),(0,s.kt)("p",null,"And finally, we have the ",(0,s.kt)("a",{parentName:"p",href:"/live-examples/opentelemetry-store/use-cases/checkout"},"Checkout")," action (",(0,s.kt)("inlineCode",{parentName:"p"},"checkout.yaml"),"), where the user inputs the billing and shipping info and finishes buying the item in the shopping cart:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},'type: Test\nspec:\n  name: Checking out shopping cart\n  description: Checking out shopping cart\n  trigger:\n    type: http\n    httpRequest:\n      url: ${var:OTEL_API_URL}/checkout\n      method: POST\n      headers:\n      - key: Content-Type\n        value: application/json\n      body: \'{"userId":"${var:USER_ID}","email":"someone@example.com","address":{"streetAddress":"1600 Amphitheatre Parkway","state":"CA","country":"United States","city":"Mountain View","zipCode":"94043"},"userCurrency":"USD","creditCard":{"creditCardCvv":672,"creditCardExpirationMonth":1,"creditCardExpirationYear":2030,"creditCardNumber":"4432-8015-6152-0454"}}\'\n  specs:\n  - selector: span[tracetest.span.type="rpc" name="hipstershop.CheckoutService/PlaceOrder"\n      rpc.system="grpc" rpc.method="PlaceOrder" rpc.service="hipstershop.CheckoutService"]\n    assertions: \n    # An order was placed.\n    - attr:app.user.id = "${var:USER_ID}"\n    - attr:app.order.items.count = 1\n  - selector: span[tracetest.span.type="rpc" name="hipstershop.PaymentService/Charge" rpc.system="grpc" rpc.method="Charge" rpc.service="hipstershop.PaymentService"]\n    assertions: \n    # The user was charged.\n    - attr:rpc.grpc.status_code  =  0\n    - attr:tracetest.selected_spans.count >= 1\n  - selector: span[tracetest.span.type="rpc" name="hipstershop.ShippingService/ShipOrder" rpc.system="grpc" rpc.method="ShipOrder" rpc.service="hipstershop.ShippingService"]\n    assertions: \n    # The product was shipped.\n    - attr:rpc.grpc.status_code = 0\n    - attr:tracetest.selected_spans.count >= 1\n  - selector: span[tracetest.span.type="rpc" name="hipstershop.CartService/EmptyCart"\n      rpc.system="grpc" rpc.method="EmptyCart" rpc.service="hipstershop.CartService"]\n    assertions: \n    # The shopping cart was emptied.\n    - attr:rpc.grpc.status_code = 0\n    - attr:tracetest.selected_spans.count >= 1\n')),(0,s.kt)("h3",{id:"creating-the-test-suite"},"Creating the Test Suite"),(0,s.kt)("p",null,"Now we wrap these files and create a Test Suite that will run these tests in sequence and will fail if any of the tests fail. We will call it ",(0,s.kt)("inlineCode",{parentName:"p"},"testsuite.yaml"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yml"},"type: TestSuite\nspec:\n  name: User purchasing products\n  description: Simulate a process of a user purchasing products on Astronomy store\n  steps:\n  - ./get-recommended-products.yaml\n  - ./add-product-into-shopping-cart.yaml\n  - ./check-shopping-cart-contents.yaml\n  - ./checkout.yaml\n")),(0,s.kt)("p",null,"By having the test, Test Suite and environment files in the same directory, we can call the CLI and execute this Test Suite:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sh"},"tracetest run testsuite -f testsuite.yaml -e user-buying-products.env\n")),(0,s.kt)("p",null,"The result should be an output like this:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sh"},"\u2714 User purchasing products (http://localhost:11633/testsuite/kRDUir0VR/run/1)\n        \u2714 Get recommended products (http://localhost:11633/test/XxH8irA4R/run/1/test)\n        \u2714 Add product into shopping cart (http://localhost:11633/test/j_N8i9AVR/run/1/test)\n        \u2714 Check shopping cart contents (http://localhost:11633/test/Y2jim9AVg/run/1/test)\n        \u2714 Checking out shopping cart (http://localhost:11633/test/VPCim90Vg/run/1/test)\n")))}h.isMDXComponent=!0}}]);