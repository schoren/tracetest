"use strict";(self.webpackChunktracetest_docs=self.webpackChunktracetest_docs||[]).push([[5942],{3905:(e,t,a)=>{a.d(t,{Zo:()=>l,kt:()=>u});var n=a(67294);function s(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){s(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,s=function(e,t){if(null==e)return{};var a,n,s={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(s[a]=e[a]);return s}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(s[a]=e[a])}return s}var p=n.createContext({}),c=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},l=function(e){var t=c(e.components);return n.createElement(p.Provider,{value:t},e.children)},d="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,s=e.mdxType,o=e.originalType,p=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),d=c(a),m=s,u=d["".concat(p,".").concat(m)]||d[m]||h[m]||o;return a?n.createElement(u,r(r({ref:t},l),{},{components:a})):n.createElement(u,r({ref:t},l))}));function u(e,t){var a=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var o=a.length,r=new Array(o);r[0]=m;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[d]="string"==typeof e?e:s,r[1]=i;for(var c=2;c<o;c++)r[c]=a[c];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},6974:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var n=a(87462),s=(a(67294),a(3905));const o={},r="Pokeshop API - Get Pokemon by ID",i={unversionedId:"live-examples/pokeshop/use-cases/get-pokemon-by-id",id:"live-examples/pokeshop/use-cases/get-pokemon-by-id",title:"Pokeshop API - Get Pokemon by ID",description:"This use case retrieves a specific Pokemon from the cache if it is cached or from the database (Postgres) also populating the cache. The idea of this query is to showcase a straightforward scenario, where the API layer receives a request from the outside and needs to evaluate a different behavior depending of its dependencies.",source:"@site/docs/live-examples/pokeshop/use-cases/get-pokemon-by-id.md",sourceDirName:"live-examples/pokeshop/use-cases",slug:"/live-examples/pokeshop/use-cases/get-pokemon-by-id",permalink:"/live-examples/pokeshop/use-cases/get-pokemon-by-id",draft:!1,editUrl:"https://github.com/kubeshop/tracetest/blob/main/docs/docs/live-examples/pokeshop/use-cases/get-pokemon-by-id.md",tags:[],version:"current",frontMatter:{},sidebar:"liveExamplesSidebar",previous:{title:"Pokeshop API - List Pokemon",permalink:"/live-examples/pokeshop/use-cases/list-pokemon"},next:{title:"Pokeshop API - Import Pokemon",permalink:"/live-examples/pokeshop/use-cases/import-pokemon"}},p={},c=[{value:"Building a Test for the Described Scenarios",id:"building-a-test-for-the-described-scenarios",level:2},{value:"Traces",id:"traces",level:3},{value:"Assertions",id:"assertions",level:3},{value:"Test Definition",id:"test-definition",level:3},{value:"Cache Miss Scenario",id:"cache-miss-scenario",level:4},{value:"Cache Miss Scenario",id:"cache-miss-scenario-1",level:4}],l={toc:c},d="wrapper";function h(e){let{components:t,...o}=e;return(0,s.kt)(d,(0,n.Z)({},l,o,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"pokeshop-api---get-pokemon-by-id"},"Pokeshop API - Get Pokemon by ID"),(0,s.kt)("p",null,"This use case retrieves a specific Pokemon from the cache if it is cached or from the database (Postgres) also populating the cache. The idea of this query is to showcase a straightforward scenario, where the API layer receives a request from the outside and needs to evaluate a different behavior depending of its dependencies."),(0,s.kt)("mermaid",{value:"sequenceDiagram\n    participant Endpoint as GET /pokemon/:id\n    participant API as API\n    participant Database as Postgres\n    participant Cache as Redis\n    \n    Endpoint->>API: request\n\n    API->>Cache: query cache\n    Cache--\x3e>API: cache response\n\n    alt cache hit\n      API--\x3e>Endpoint: 200 OK <br> <Pokemon object>\n    else cache miss\n      API->>Database: get specific of pokemon\n      Database--\x3e>API: pokemon\n\n      API->>Cache: populate cache\n      Cache--\x3e>API: ok\n\n      API--\x3e>Endpoint: 200 OK <br> <Pokemon object>\n    end"}),(0,s.kt)("p",null,"You can trigger this use case by calling the endpoint ",(0,s.kt)("inlineCode",{parentName:"p"},"GET /pokemon/25")," without payload and should receive a payload similar to this: "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "id":  25,\n  "name":  "pikachu",\n  "type":  "electric",\n  "imageUrl":  "https://assets.pokemon.com/assets/cms2/img/pokedex/full/025.png",\n  "isFeatured":  true\n}\n')),(0,s.kt)("h2",{id:"building-a-test-for-the-described-scenarios"},"Building a Test for the Described Scenarios"),(0,s.kt)("p",null,"Using Tracetest, we can ",(0,s.kt)("a",{parentName:"p",href:"/web-ui/creating-tests"},"create two tests")," that will execute an API call on ",(0,s.kt)("inlineCode",{parentName:"p"},"GET /pokemon/25")," and validate the following scenarios:"),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("strong",{parentName:"li"},"An API call with a cache hit."),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"The API should return a valid result with HTTP 200 OK."),(0,s.kt)("li",{parentName:"ul"},"The cache should be queried."),(0,s.kt)("li",{parentName:"ul"},"The database should not be queried."))),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("strong",{parentName:"li"},"An API call with a cache miss."),(0,s.kt)("ul",{parentName:"li"},(0,s.kt)("li",{parentName:"ul"},"The API should return a valid result with HTTP 200 OK."),(0,s.kt)("li",{parentName:"ul"},"The cache should be queried."),(0,s.kt)("li",{parentName:"ul"},"The cache should be populated."),(0,s.kt)("li",{parentName:"ul"},"The database should be queried.")))),(0,s.kt)("h3",{id:"traces"},"Traces"),(0,s.kt)("p",null,"Running these tests for the first time will create an Observability trace with two different shapes, depending on the cache situation."),(0,s.kt)("ol",null,(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Cache Miss")," where we can see spans from the API, database, and cache:\n",(0,s.kt)("img",{src:a(68954).Z,width:"2232",height:"1344"}))),(0,s.kt)("li",{parentName:"ol"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Cache Hit")," where we can see spans from the API and cache:\n",(0,s.kt)("img",{src:a(97301).Z,width:"1340",height:"1330"})))),(0,s.kt)("h3",{id:"assertions"},"Assertions"),(0,s.kt)("p",null,"With this trace, we can build ",(0,s.kt)("a",{parentName:"p",href:"/concepts/assertions"},"assertions")," on Tracetest and validate API, cache, and database responses:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"[Both Cases]"," The API should return a valid result with HTTP 200 OK.\n",(0,s.kt)("img",{src:a(96008).Z,width:"2852",height:"848"}))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"[Both Cases]"," The cache should be queried.\n",(0,s.kt)("img",{src:a(23758).Z,width:"2840",height:"752"}))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"[Cache Hit]"," The database should not be queried.\n",(0,s.kt)("img",{src:a(86431).Z,width:"2794",height:"822"}))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"[Cache Miss]"," The cache should be populated.\n",(0,s.kt)("img",{src:a(5505).Z,width:"2850",height:"756"}))),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},"[Cache Miss]"," The database should be queried.\n",(0,s.kt)("img",{src:a(93932).Z,width:"2830",height:"816"})))),(0,s.kt)("p",null,"Now you can validate this entire use case."),(0,s.kt)("h3",{id:"test-definition"},"Test Definition"),(0,s.kt)("p",null,"If you want to replicate those tests on Tracetest, you can replicate these steps on our Web UI or using our CLI, saving one of the test definitions as the file ",(0,s.kt)("inlineCode",{parentName:"p"},"test-definition.yml")," and running:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-sh"},"tracetest run test -f test-definition.yml\n")),(0,s.kt)("h4",{id:"cache-miss-scenario"},"Cache Miss Scenario"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yaml"},'type: Test\nspec:\n  name: Pokeshop - Get Pokemon by ID [cache miss scenario]\n  trigger:\n    type: http\n    httpRequest:\n      url: http://demo-pokemon-api.demo/pokemon/${var:POKEMON_ID}\n      method: GET\n      headers:\n      - key: Content-Type\n        value: application/json\n  specs:\n  - selector: span[tracetest.span.type="http" http.method="GET"]\n    assertions:\n    - attr:http.status_code  =  200\n    - attr:http.response.body | json_path \'$.id\'  =  \'${var:POKEMON_ID}\'\n  - selector: span[tracetest.span.type="database" db.system="redis" db.operation="get"]\n    assertions:\n    - attr:name  =  "get pokemon-${var:POKEMON_ID}"\n  - selector: span[tracetest.span.type="database" db.system="redis" db.operation="set"]\n    assertions:\n    - attr:name = "set pokemon-${var:POKEMON_ID}"\n  - selector: |-\n      span[tracetest.span.type="database" name="findOne pokeshop.pokemon"\n            db.system="postgres" db.name="pokeshop" db.operation="findOne" db.sql.table="pokemon"]\n    assertions:\n    - attr:tracetest.selected_spans.count > 0\n')),(0,s.kt)("h4",{id:"cache-miss-scenario-1"},"Cache Miss Scenario"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-yml"},'type: Test\nspec:\n  name: Pokeshop - Get Pokemon by ID [cache hit scenario]\n  trigger:\n    type: http\n    httpRequest:\n      url: http://demo-pokemon-api.demo/pokemon/${var:POKEMON_ID}\n      method: GET\n      headers:\n      - key: Content-Type\n        value: application/json\n  specs:\n  - selector: span[tracetest.span.type="http" http.method="GET"]\n    assertions:\n    - attr:http.status_code  =  200\n    - attr:http.response.body | json_path \'$.id\'  =  "${var:POKEMON_ID}"\n  - selector: span[tracetest.span.type="database" db.system="redis" db.operation="get"]\n    assertions:\n    - attr:name = "get pokemon-${var:POKEMON_ID}"\n    - attr:db.result | json_path \'$.id\' = "${var:POKEMON_ID}"\n  - selector: |-\n      span[tracetest.span.type="database" name="findOne pokeshop.pokemon"\n            db.system="postgres" db.name="pokeshop" db.operation="findOne" db.sql.table="pokemon"]\n    assertions:\n    - attr:tracetest.selected_spans.count  =  0\n')))}h.isMDXComponent=!0},96008:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/get-pokemon-by-id-api-test-spec-28803fd335ae3e027dbe1e09d3ec8cb9.png"},86431:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/get-pokemon-by-id-db-no-query-test-spec-8ed173ccda4aeb6df1d14f8e50c30023.png"},93932:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/get-pokemon-by-id-db-query-test-spec-58f77885b9ae58ae62ccb836f1766c94.png"},23758:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/get-pokemon-by-id-redis-query-test-spec-9a71452c55098fd744926666c9343170.png"},5505:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/get-pokemon-by-id-redis-set-test-spec-e8a50d2f17ca3604bfaa10054d19dd0d.png"},97301:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/get-pokemon-by-id-trace-cachehit-d3709b282862f0c259c6e4ac212b856b.png"},68954:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/get-pokemon-by-id-trace-cachemiss-05b6015135529457df14833d58199f2b.png"}}]);