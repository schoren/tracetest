"use strict";(self.webpackChunktracetest_docs=self.webpackChunktracetest_docs||[]).push([[3957],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(n),d=r,h=u["".concat(l,".").concat(d)]||u[d]||m[d]||s;return n?a.createElement(h,o(o({ref:t},c),{},{components:n})):a.createElement(h,o({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,o=new Array(s);o[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[u]="string"==typeof e?e:r,o[1]=i;for(var p=2;p<s;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},67516:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>i,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const s={},o="GitHub Actions Pipeline",i={unversionedId:"ci-cd-automation/github-actions-pipeline",id:"ci-cd-automation/github-actions-pipeline",title:"GitHub Actions Pipeline",description:"Check out the source code on GitHub here.",source:"@site/docs/ci-cd-automation/github-actions-pipeline.md",sourceDirName:"ci-cd-automation",slug:"/ci-cd-automation/github-actions-pipeline",permalink:"/ci-cd-automation/github-actions-pipeline",draft:!1,editUrl:"https://github.com/kubeshop/tracetest/blob/main/docs/docs/ci-cd-automation/github-actions-pipeline.md",tags:[],version:"current",frontMatter:{},sidebar:"examplesTutorialsSidebar",previous:{title:"CI/CD Automation",permalink:"/ci-cd-automation/overview"},next:{title:"Testkube Kubernetes-native Test Runner Pipeline",permalink:"/ci-cd-automation/testkube-pipeline"}},l={},p=[{value:"GitHub Actions Workflow for Running Tracetest tests against a sample Node.js app with OpenTelemetry",id:"github-actions-workflow-for-running-tracetest-tests-against-a-sample-nodejs-app-with-opentelemetry",level:2},{value:"GitHub Actions Workflow",id:"github-actions-workflow",level:2},{value:"Project structure",id:"project-structure",level:2},{value:"1. Node.js app",id:"1-nodejs-app",level:3},{value:"2. Tracetest",id:"2-tracetest",level:3},{value:"Docker Compose Network",id:"docker-compose-network",level:3},{value:"Node.js app",id:"nodejs-app",level:2},{value:"Tracetest",id:"tracetest",level:2},{value:"Run both the Node.js app and Tracetest",id:"run-both-the-nodejs-app-and-tracetest",level:2},{value:"Run Tracetest tests with the Tracetest CLI",id:"run-tracetest-tests-with-the-tracetest-cli",level:2}],c={toc:p},u="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"github-actions-pipeline"},"GitHub Actions Pipeline"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{parentName:"p",href:"https://github.com/kubeshop/tracetest/tree/main/examples/quick-start-github-actions"},"Check out the source code on GitHub here."))),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://tracetest.io/"},"Tracetest")," is a testing tool based on ",(0,r.kt)("a",{parentName:"p",href:"https://opentelemetry.io/"},"OpenTelemetry")," that allows you to test your distributed application. It allows you to use data from distributed traces generated by OpenTelemetry to validate and assert if your application has the desired behavior defined by your test definitions."),(0,r.kt)("h2",{id:"github-actions-workflow-for-running-tracetest-tests-against-a-sample-nodejs-app-with-opentelemetry"},"GitHub Actions Workflow for Running Tracetest tests against a sample Node.js app with OpenTelemetry"),(0,r.kt)("p",null,"This is a simple quick start on how to configure GitHub Actions to run Tracetest tests against a Node.js app thats uses OpenTelemetry instrumentation with traces. This example includes manual instrumentation and a sample bookstore array that simulates fetching data from a database."),(0,r.kt)("h2",{id:"github-actions-workflow"},"GitHub Actions Workflow"),(0,r.kt)("p",null,"This sample has two workflows. The workflows have one job and a total of 6 steps. The steps are:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Checking out the repo code"),(0,r.kt)("li",{parentName:"ol"},"Starting the sample app with Docker Compose"),(0,r.kt)("li",{parentName:"ol"},"Installing the Tracetest CLI"),(0,r.kt)("li",{parentName:"ol"},"Configuring the Tracetest CLI"),(0,r.kt)("li",{parentName:"ol"},"Running tests with the Tracetest CLI"),(0,r.kt)("li",{parentName:"ol"},"Stop Docker Compose")),(0,r.kt)("p",null,"The first workflow triggers a pre-merge and merge test run."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'# start-and-test-on-main.yaml\n\nname: Docker Compose Start and Test on push and PR to main\n\non:\n  push:\n    branches: [ "main" ]\n  pull_request:\n    branches: [ "main" ]\n\njobs:\n  start-and-test:\n    timeout-minutes: 10\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v1\n\n    - name: Start containers\n      run: docker compose -f "docker-compose.yaml" -f "tracetest/docker-compose.yaml" up -d --build\n\n    - name: Install Tracetest CLI\n      shell: bash\n      run: curl -L https://raw.githubusercontent.com/kubeshop/tracetest/main/install-cli.sh | bash\n\n    - name: Configure Tracetest CLI\n      run: tracetest configure -g --endpoint http://localhost:11633\n\n    - name: Run tests via the Tracetest CLI\n      run: |\n        tracetest run test -f ./tracetest/tests/test-api.yaml\n        tracetest run test -f ./tracetest/tests/test-api-and-av.yaml\n        tracetest run testsuite -f ./tracetest/tests/testsuite-api.yaml\n\n    - name: Stop containers\n      if: always()\n      run: docker compose -f "docker-compose.yaml" -f "tracetest/docker-compose.yaml" down -v\n')),(0,r.kt)("p",null,"And, the other is a scheduled test run."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'# start-and-test-on-schedule.yaml\n\nname: Docker Compose Start and Test Every Hour\n\non:\n  schedule:\n    - cron: \'0 * * * *\'\n\njobs:\n  start-and-test:\n    timeout-minutes: 10\n    runs-on: ubuntu-latest\n    steps:\n    - name: Checkout\n      uses: actions/checkout@v1\n\n    - name: Start containers\n      run: docker compose -f "docker-compose.yaml" -f "tracetest/docker-compose.yaml" up -d --build\n\n    - name: Install Tracetest CLI\n      shell: bash\n      run: curl -L https://raw.githubusercontent.com/kubeshop/tracetest/main/install-cli.sh | bash\n\n    - name: Configure Tracetest CLI\n      run: tracetest configure -g --endpoint http://localhost:11633\n\n    - name: Run tests via the Tracetest CLI\n      run: |\n        tracetest run test -f ./tracetest/tests/test-api.yaml\n        tracetest run test -f ./tracetest/tests/test-api-and-av.yaml\n        tracetest run testsuite -f ./tracetest/tests/testsuite-api.yaml\n\n    - name: Stop containers\n      if: always()\n      run: docker compose -f "docker-compose.yaml" -f "tracetest/docker-compose.yaml" down -v\n')),(0,r.kt)("h2",{id:"project-structure"},"Project structure"),(0,r.kt)("p",null,"Let's first explain how the example app is built. It uses Docker Compose, and contains two distinct ",(0,r.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," files. As you see in the GitHub Actions Workflow, all services in the example app are started with Docker Compose."),(0,r.kt)("h3",{id:"1-nodejs-app"},"1. Node.js app"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," file and ",(0,r.kt)("inlineCode",{parentName:"p"},"Dockerfile")," in the root directory are for the Node.js app."),(0,r.kt)("h3",{id:"2-tracetest"},"2. Tracetest"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," file, ",(0,r.kt)("inlineCode",{parentName:"p"},"collector.config.yaml"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"tracetest-provision.yaml"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"tracetest.config.yaml")," in the ",(0,r.kt)("inlineCode",{parentName:"p"},"tracetest")," directory are for the setting up Tracetest and the OpenTelemetry Collector."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"tracetest")," directory is self-contained and will run all the prerequisites for enabling OpenTelemetry traces and trace-based testing with Tracetest."),(0,r.kt)("h3",{id:"docker-compose-network"},"Docker Compose Network"),(0,r.kt)("p",null,"All ",(0,r.kt)("inlineCode",{parentName:"p"},"services")," in the ",(0,r.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," are on the same network and will be reachable by hostname from within other services. E.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"tracetest:4317")," in the ",(0,r.kt)("inlineCode",{parentName:"p"},"collector.config.yaml")," will map to the ",(0,r.kt)("inlineCode",{parentName:"p"},"tracetest")," service, where the port ",(0,r.kt)("inlineCode",{parentName:"p"},"4317")," is the port where Tracetest accepts traces."),(0,r.kt)("h2",{id:"nodejs-app"},"Node.js app"),(0,r.kt)("p",null,"The Node.js app is a simple Express app with two microservices, contained in the ",(0,r.kt)("inlineCode",{parentName:"p"},"app.js")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"availability.js")," files."),(0,r.kt)("p",null,"The OpenTelemetry tracing is contained in the ",(0,r.kt)("inlineCode",{parentName:"p"},"tracing.otel.grpc.js")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"tracing.otel.http.js")," files, respectively.\nTraces will be sent to the OpenTelemetry Collector."),(0,r.kt)("p",null,"Here's the content of the ",(0,r.kt)("inlineCode",{parentName:"p"},"tracing.otel.grpc.js")," file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'const opentelemetry = require("@opentelemetry/sdk-node");\nconst {\n  getNodeAutoInstrumentations,\n} = require("@opentelemetry/auto-instrumentations-node");\nconst {\n  OTLPTraceExporter,\n} = require("@opentelemetry/exporter-trace-otlp-grpc");\nconst { Resource } = require("@opentelemetry/resources");\nconst {\n  SemanticResourceAttributes,\n} = require("@opentelemetry/semantic-conventions");\nconst { NodeTracerProvider } = require("@opentelemetry/sdk-trace-node");\nconst { BatchSpanProcessor } = require("@opentelemetry/sdk-trace-base");\n\nconst resource = Resource.default().merge(\n  new Resource({\n    [SemanticResourceAttributes.SERVICE_NAME]:\n      "quick-start-nodejs-manual-instrumentation",\n    [SemanticResourceAttributes.SERVICE_VERSION]: "0.0.1",\n  })\n);\n\nconst provider = new NodeTracerProvider({ resource: resource });\nconst exporter = new OTLPTraceExporter({ url: "http://otel-collector:4317" });\nconst processor = new BatchSpanProcessor(exporter);\nprovider.addSpanProcessor(processor);\nprovider.register();\n\nconst sdk = new opentelemetry.NodeSDK({\n  traceExporter: exporter,\n  instrumentations: [getNodeAutoInstrumentations()],\n  serviceName: "quick-start-nodejs-manual-instrumentation",\n});\nsdk.start();\n')),(0,r.kt)("p",null,"Depending on which of these you choose, traces will be sent to either the ",(0,r.kt)("inlineCode",{parentName:"p"},"grpc")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"http")," endpoint."),(0,r.kt)("p",null,"The hostnames and ports for these are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"GRPC: ",(0,r.kt)("inlineCode",{parentName:"li"},"http://otel-collector:4317")),(0,r.kt)("li",{parentName:"ul"},"HTTP: ",(0,r.kt)("inlineCode",{parentName:"li"},"http://otel-collector:4318/v1/traces"))),(0,r.kt)("p",null,"Enabling the tracer is done by preloading the trace file."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"node -r ./tracing.otel.grpc.js app.js\n")),(0,r.kt)("p",null,"In the ",(0,r.kt)("inlineCode",{parentName:"p"},"package.json")," you will see two npm script for running the respective tracers alongside the ",(0,r.kt)("inlineCode",{parentName:"p"},"app.js"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'"scripts": {\n  "app-with-grpc-tracer": "node -r ./tracing.otel.grpc.js app.js",\n  "app-with-http-tracer": "node -r ./tracing.otel.http.js app.js",\n  "availability-with-grpc-tracer": "node -r ./tracing.otel.grpc.js availability.js",\n  "availability-with-http-tracer": "node -r ./tracing.otel.http.js availability.js"\n},\n')),(0,r.kt)("p",null,"To start the ",(0,r.kt)("inlineCode",{parentName:"p"},"app.js")," Express server you run this command."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm run app-with-grpc-tracer\n# or\nnpm run app-with-http-tracer\n")),(0,r.kt)("p",null,"To start the ",(0,r.kt)("inlineCode",{parentName:"p"},"availability.js")," Express server you run this command."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm run availability-with-grpc-tracer\n# or\nnpm run availability-with-http-tracer\n")),(0,r.kt)("p",null,"As you can see the ",(0,r.kt)("inlineCode",{parentName:"p"},"Dockerfile")," does not have a ",(0,r.kt)("inlineCode",{parentName:"p"},"CMD")," section."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-Dockerfile"},"FROM node:slim\nWORKDIR /usr/src/app\nCOPY package*.json ./\nRUN npm install\nCOPY . .\nEXPOSE 8080\n")),(0,r.kt)("p",null,"Instead, the ",(0,r.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," contains the ",(0,r.kt)("inlineCode",{parentName:"p"},"CMD")," section for both services."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'version: "3"\nservices:\n  app:\n    image: quick-start-nodejs\n    build: .\n    command: npm run app-with-grpc-tracer\n    ports:\n      - "8080:8080"\n  availability:\n    image: quick-start-nodejs-availability\n    build: .\n    command: npm run availability-with-grpc-tracer\n    ports:\n      - "8080"\n')),(0,r.kt)("p",null,"To start it, run this command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker compose build # optional if you haven't already built the image\ndocker compose up\n")),(0,r.kt)("p",null,"This will start the Node.js app. But, you're not sending the traces anywhere."),(0,r.kt)("p",null,"Let's fix this by configuring Tracetest and OpenTelemetry Collector."),(0,r.kt)("h2",{id:"tracetest"},"Tracetest"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," in the ",(0,r.kt)("inlineCode",{parentName:"p"},"tracetest")," directory is configured with three services."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Postgres")," - Postgres is a prerequisite for Tracetest to work. It stores trace data when running the trace-based tests."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://opentelemetry.io/docs/collector/"},(0,r.kt)("strong",{parentName:"a"},"OpenTelemetry Collector"))," - A vendor-agnostic implementation of how to receive, process and export telemetry data."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://tracetest.io/"},(0,r.kt)("strong",{parentName:"a"},"Tracetest"))," - Trace-based testing that generates end-to-end tests automatically from traces.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'version: "3"\nservices:\n  tracetest:\n    image: kubeshop/tracetest:latest\n    platform: linux/amd64\n    volumes:\n      - type: bind\n        source: ./tracetest/tracetest-config.yaml\n        target: /app/tracetest.yaml\n      - type: bind\n        source: ./tracetest/tracetest-provision.yaml\n        target: /app/provisioning.yaml\n    ports:\n      - 11633:11633\n    command: --provisioning-file /app/provisioning.yaml\n    depends_on:\n      postgres:\n        condition: service_healthy\n      otel-collector:\n        condition: service_started\n    healthcheck:\n      test: ["CMD", "wget", "--spider", "localhost:11633"]\n      interval: 1s\n      timeout: 3s\n      retries: 60\n    environment:\n      TRACETEST_DEV: ${TRACETEST_DEV}\n\n  postgres:\n    image: postgres:14\n    environment:\n      POSTGRES_PASSWORD: postgres\n      POSTGRES_USER: postgres\n    healthcheck:\n      test: pg_isready -U "$$POSTGRES_USER" -d "$$POSTGRES_DB"\n      interval: 1s\n      timeout: 5s\n      retries: 60\n\n  otel-collector:\n    image: otel/opentelemetry-collector-contrib:0.59.0\n    command:\n      - "--config"\n      - "/otel-local-config.yaml"\n    volumes:\n      - ./tracetest/collector.config.yaml:/otel-local-config.yaml\n')),(0,r.kt)("p",null,"Tracetest depends on both Postgres and the OpenTelemetry Collector. Both Tracetest and the OpenTelemetry Collector require config files to be loaded via a volume. The volumes are mapped from the root directory into the ",(0,r.kt)("inlineCode",{parentName:"p"},"tracetest")," directory and the respective config files."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"tracetest-config.yaml")," file contains the basic setup of connecting Tracetest to the Postgres instance."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"postgres:\n  host: postgres\n  user: postgres\n  password: postgres\n  port: 5432\n  dbname: postgres\n  params: sslmode=disable\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"tracetest-provision.yaml")," file provisions the trace data store and polling to store in the Postgres database. The data store is set to OTLP meaning the traces will be stored in Tracetest itself."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"---\ntype: PollingProfile\nspec:\n  name: Default\n  strategy: periodic\n  default: true\n  periodic:\n    retryDelay: 5s\n    timeout: 10m\n\n---\ntype: DataStore\nspec:\n  name: OpenTelemetry Collector\n  type: otlp\n  default: true\n")),(0,r.kt)("p",null,"But how are traces sent to Tracetest?"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"collector.config.yaml")," explains that. It receives traces via either ",(0,r.kt)("inlineCode",{parentName:"p"},"grpc")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"http"),". Then, exports them to Tracetest's otlp endpoint ",(0,r.kt)("inlineCode",{parentName:"p"},"tracetest:4317"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"receivers:\n  otlp:\n    protocols:\n      grpc:\n      http:\n\nprocessors:\n  batch:\n    timeout: 100ms\n\nexporters:\n  logging:\n    loglevel: debug\n  otlp/1:\n    endpoint: tracetest:4317\n    # Send traces to Tracetest.\n    # Read more in docs here: https://docs.tracetest.io/configuration/connecting-to-data-stores/opentelemetry-collector\n    tls:\n      insecure: true\n\nservice:\n  pipelines:\n    traces/1:\n      receivers: [otlp]\n      processors: [batch]\n      exporters: [otlp/1]\n")),(0,r.kt)("h2",{id:"run-both-the-nodejs-app-and-tracetest"},"Run both the Node.js app and Tracetest"),(0,r.kt)("p",null,"To start both the Node.js services and Tracetest we will run this command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker-compose -f docker-compose.yaml -f tracetest/docker-compose.yaml up # add --build if the images are not built already\n")),(0,r.kt)("p",null,"This will start your Tracetest instance on ",(0,r.kt)("inlineCode",{parentName:"p"},"http://localhost:11633/"),"."),(0,r.kt)("h2",{id:"run-tracetest-tests-with-the-tracetest-cli"},"Run Tracetest tests with the Tracetest CLI"),(0,r.kt)("p",null,"First, ",(0,r.kt)("a",{parentName:"p",href:"https://docs.tracetest.io/getting-started/installation#install-the-tracetest-cli"},"install the CLI"),".\nThen, configure the CLI:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"tracetest configure --endpoint http://localhost:11633\n")),(0,r.kt)("p",null,"Once configured, you can run a test against the Tracetest instance via the terminal."),(0,r.kt)("p",null,"Check out the ",(0,r.kt)("inlineCode",{parentName:"p"},"test-api.yaml")," file in the ",(0,r.kt)("inlineCode",{parentName:"p"},"./tracetest/tests")," directory."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'type: Test\nspec:\n  id: W656Q0c4g\n  name: Books List\n  description: List of books\n  trigger:\n    type: http\n    httpRequest:\n      url: http://app:8080/books\n      method: GET\n      headers:\n        - key: Content-Type\n          value: application/json\n  specs:\n    - selector: span[tracetest.span.type="http" name="GET /books" http.target="/books" http.method="GET"]\n      assertions:\n        - attr:http.status_code = 200\n    - selector: span[tracetest.span.type="general" name="Books List"]\n      assertions:\n        - attr:books.list.count = 4\n')),(0,r.kt)("p",null,"To run the test, run this command in the terminal:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"tracetest run test -f ./tracetest/tests/test-api.yaml\n")),(0,r.kt)("p",null,"This test will fail just like the sample above due to the ",(0,r.kt)("inlineCode",{parentName:"p"},"attr:books.list.count = 4")," assertion."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'\u2718 http://app:8080 (http://localhost:11633/test/W656Q0c4g/run/5/test)\n    \u2714 span[tracetest.span.type="http" name="GET /books" http.target="/books" http.method="GET"]\n        \u2714 #994c63e0ea35e632\n            \u2714 attr:http.status_code = 200 (200)\n    \u2718 span[tracetest.span.type="general" name="Books List"]\n        \u2718 #5ab1856c32b0d5c8\n            \u2718 attr:books.list.count = 4 (3) (http://localhost:11633/test/W656Q0c4g/run/5/test?selectedAssertion=1&selectedSpan=5ab1856c32b0d5c8)\n')),(0,r.kt)("p",null,"The tests will pass if you change the assertion to:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-css"},"attr: books.list.count = 3;\n")),(0,r.kt)("p",null,"There are two more files in the ",(0,r.kt)("inlineCode",{parentName:"p"},"./tracetest/tests")," directory that we use in the GitHub Actions Workflow."),(0,r.kt)("p",null,"The test ",(0,r.kt)("inlineCode",{parentName:"p"},"test-api-and-av.yaml")," also includes assertions for the ",(0,r.kt)("inlineCode",{parentName:"p"},"availability")," service."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'# ./tracetest/tests/test-api-and-av.yaml\n\ntype: Test\nspec:\n  id: phAZcrT4B\n  name: Books list with availability\n  description: Testing the books list and availability check\n  trigger:\n    type: http\n    httpRequest:\n      url: http://app:8080/books\n      method: GET\n      headers:\n      - key: Content-Type\n        value: application/json\n  specs:\n  - selector: span[tracetest.span.type="http" name="GET /books" http.target="/books"\n      http.method="GET"]\n    assertions:\n    - attr:tracetest.span.duration  < 500ms\n  - selector: span[tracetest.span.type="general" name="Books List"]\n    assertions:\n    - attr:books.list.count = 3\n  - selector: span[tracetest.span.type="http" name="GET /availability/:bookId" http.method="GET"]\n    assertions:\n    - attr:http.host = "availability:8080"\n  - selector: span[tracetest.span.type="general" name="Availablity check"]\n    assertions:\n    - attr:isAvailable = "true"\n')),(0,r.kt)("p",null,"The testsuite ",(0,r.kt)("inlineCode",{parentName:"p"},"testsuite-api.yaml")," will run both the tests above."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"# ./tracetest/tests/testsuite-api.yaml\n\ntype: TestSuite\nspec:\n  id: 3YIB7rPVg\n  name: All Tests for the Books List API\n  steps:\n  - phAZcrT4W\n  - phAZcrT4B\n")),(0,r.kt)("p",null,"Feel free to check out our ",(0,r.kt)("a",{parentName:"p",href:"https://docs.tracetest.io/"},"docs"),", and join our ",(0,r.kt)("a",{parentName:"p",href:"https://discord.gg/8MtcMrQNbX"},"Discord Community")," for more info!"))}m.isMDXComponent=!0}}]);