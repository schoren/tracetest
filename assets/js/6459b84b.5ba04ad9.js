"use strict";(self.webpackChunktracetest_docs=self.webpackChunktracetest_docs||[]).push([[7868],{18679:(e,t,n)=>{n.d(t,{Z:()=>o});var a=n(67294),r=n(86010);const l={tabItem:"tabItem_Ymn6"};function o(e){let{children:t,hidden:n,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(l.tabItem,o),hidden:n},t)}},73992:(e,t,n)=>{n.d(t,{Z:()=>f});var a=n(87462),r=n(67294),l=n(86010),o=n(72957),i=n(16550),s=n(75238),c=n(33609),u=n(92560);function d(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function p(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??d(n);return function(e){const t=(0,c.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function g(e){let{queryString:t=!1,groupId:n}=e;const a=(0,i.k6)(),l=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,s._X)(l),(0,r.useCallback)((e=>{if(!l)return;const t=new URLSearchParams(a.location.search);t.set(l,e),a.replace({...a.location,search:t.toString()})}),[l,a])]}function h(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,l=p(e),[o,i]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:l}))),[s,c]=g({queryString:n,groupId:a}),[d,h]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,l]=(0,u.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&l.set(e)}),[n,l])]}({groupId:a}),k=(()=>{const e=s??d;return m({value:e,tabValues:l})?e:null})();(0,r.useLayoutEffect)((()=>{k&&i(k)}),[k]);return{selectedValue:o,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);i(e),c(e),h(e)}),[c,h,l]),tabValues:l}}var k=n(51048);const b={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function v(e){let{className:t,block:n,selectedValue:i,selectValue:s,tabValues:c}=e;const u=[],{blockElementScrollPositionUntilNextRender:d}=(0,o.o5)(),p=e=>{const t=e.currentTarget,n=u.indexOf(t),a=c[n].value;a!==i&&(d(t),s(a))},m=e=>{let t=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const n=u.indexOf(e.currentTarget)+1;t=u[n]??u[0];break}case"ArrowLeft":{const n=u.indexOf(e.currentTarget)-1;t=u[n]??u[u.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":n},t)},c.map((e=>{let{value:t,label:n,attributes:o}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:i===t?0:-1,"aria-selected":i===t,key:t,ref:e=>u.push(e),onKeyDown:m,onClick:p},o,{className:(0,l.Z)("tabs__item",b.tabItem,o?.className,{"tabs__item--active":i===t})}),n??t)})))}function y(e){let{lazy:t,children:n,selectedValue:a}=e;const l=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=l.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},l.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function T(e){const t=h(e);return r.createElement("div",{className:(0,l.Z)("tabs-container",b.tabList)},r.createElement(v,(0,a.Z)({},e,t)),r.createElement(y,(0,a.Z)({},e,t)))}function f(e){const t=(0,k.Z)();return r.createElement(T,(0,a.Z)({key:String(t)},e))}},91017:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(67294),r=n(73992),l=n(18679),o=n(92053);function i(){function e(e){let{event:t,installationPlatform:n}=e;window.dataLayer=window.dataLayer||[],window.dataLayer.push({installationPlatform:n,event:"installationPlatform"})}return a.createElement(r.Z,{groupId:"operating-systems"},a.createElement(l.Z,{value:"mac",label:"MAC",default:!0},a.createElement("div",{onClick:()=>e({installationPlatform:"MacOS"})},a.createElement(o.Z,{language:"bash",title:"Terminal"},"brew install kubeshop/tracetest/tracetest"))),a.createElement(l.Z,{value:"linux",label:"LINUX"},a.createElement("div",{onClick:()=>e({installationPlatform:"Linux"})},a.createElement(o.Z,{language:"bash",title:"Terminal"},"curl -L https://raw.githubusercontent.com/kubeshop/tracetest/main/install-cli.sh | bash"))),a.createElement(l.Z,{value:"win",label:"WINDOWS"},a.createElement("div",{onClick:()=>e({installationPlatform:"Windows"})},a.createElement(o.Z,{language:"bash",title:"Terminal"},"choco source add --name=kubeshop_repo --source=https://chocolatey.kubeshop.io/chocolatey ; choco install tracetest"))))}},3492:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>u,default:()=>k,frontMatter:()=>c,metadata:()=>d,toc:()=>m});var a=n(87462),r=(n(67294),n(3905)),l=n(73992),o=n(18679),i=n(92053),s=n(91017);const c={id:"installation",title:"Installing Tracetest",description:"Tracetest allows you to quickly build integration and end-to-end tests, powered by your OpenTelemetry traces.",keywords:["tracetest","trace-based testing","observability","distributed tracing","testing"],image:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1689693872/docs/Blog_Thumbnail_28_ugy2yy.png"},u=void 0,d={unversionedId:"getting-started/installation",id:"getting-started/installation",title:"Installing Tracetest",description:"Tracetest allows you to quickly build integration and end-to-end tests, powered by your OpenTelemetry traces.",source:"@site/docs/getting-started/installation.mdx",sourceDirName:"getting-started",slug:"/getting-started/installation",permalink:"/getting-started/installation",draft:!1,editUrl:"https://github.com/kubeshop/tracetest/blob/main/docs/docs/getting-started/installation.mdx",tags:[],version:"current",frontMatter:{id:"installation",title:"Installing Tracetest",description:"Tracetest allows you to quickly build integration and end-to-end tests, powered by your OpenTelemetry traces.",keywords:["tracetest","trace-based testing","observability","distributed tracing","testing"],image:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1689693872/docs/Blog_Thumbnail_28_ugy2yy.png"},sidebar:"tutorialSidebar",previous:{title:"Getting Started with Tracetest",permalink:"/getting-started/overview"},next:{title:"Opening Tracetest",permalink:"/getting-started/open"}},p={},m=[{value:"Install the Tracetest CLI",id:"install-the-tracetest-cli",level:2},{value:"Install the Tracetest Agent",id:"install-the-tracetest-agent",level:2}],g={toc:m},h="wrapper";function k(e){let{components:t,...n}=e;return(0,r.kt)(h,(0,a.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This page showcases getting started with Tracetest by using the Tracetest CLI and Agent."),(0,r.kt)("h2",{id:"install-the-tracetest-cli"},"Install the Tracetest CLI"),(0,r.kt)(s.Z,{mdxType:"GtagInstallCliTabs"}),(0,r.kt)("h2",{id:"install-the-tracetest-agent"},"Install the Tracetest Agent"),(0,r.kt)("p",null,"Tracetest Agent runs as a standalone process. It runs either locally on your machine or as a container. Once started the Agent exposes OTLP ports ",(0,r.kt)("inlineCode",{parentName:"p"},"4317")," (gRPC) and ",(0,r.kt)("inlineCode",{parentName:"p"},"4318")," (HTTP) for trace ingestion."),(0,r.kt)(l.Z,{groupId:"installation",mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"cli",label:"Tracetest CLI",default:!0,mdxType:"TabItem"},(0,r.kt)(i.Z,{language:"text",title:"Terminal",mdxType:"CodeBlock"},"tracetest start"),(0,r.kt)("p",null,"The Agent will start and open a browser. Sign in to Tracetest."),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1695990166/docs/screely-1695990151905_eb8yiw.png",alt:null})),(0,r.kt)("p",null,"Once signed in, return to the terminal."),(0,r.kt)(i.Z,{language:"text",title:"Expected output:",mdxType:"CodeBlock"},"Defaulting to only available Environment: localMode\n  INFO Connecting Agent with name local to Organization org_name and Environment localMode\n  INFO Starting Agent with name local...\nAgent is started! Leave the terminal open so tests can be run and traces gathered from this environment (env_name).\nYou can: [type to search]:\n> Open Tracetest in a browser to this environment\n  Stop this agent"),(0,r.kt)("p",null,"The Tracetest Agent is running and ready to accept traces."),(0,r.kt)("p",null,"gRPC: ",(0,r.kt)("inlineCode",{parentName:"p"},"http://localhost:4317")),(0,r.kt)("p",null,"HTTP: ",(0,r.kt)("inlineCode",{parentName:"p"},"http://localhost:4318/v1/traces"))),(0,r.kt)(o.Z,{value:"docker",label:"Docker",default:!0,mdxType:"TabItem"},(0,r.kt)(i.Z,{language:"text",title:"Terminal",mdxType:"CodeBlock"},'docker run \\\n-p 4317:4317 \\\n-p 4318:4318 \\\n-e TRACETEST_API_KEY="<your_api_key>" \\\nkubeshop/tracetest-agent'),(0,r.kt)("p",null,"The Agent will start and open a browser. Sign in to Tracetest."),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1695990166/docs/screely-1695990151905_eb8yiw.png",alt:null})),(0,r.kt)("p",null,"Once signed in, return to the terminal."),(0,r.kt)(i.Z,{language:"text",title:"Expected output:",mdxType:"CodeBlock"},"Defaulting to only available Environment: localMode\n  INFO Connecting Agent with name local to Organization org_name and Environment localMode\n  INFO Starting Agent with name local...\nAgent is started! Leave the terminal open so tests can be run and traces gathered from this environment (env_name).\nYou can: [type to search]:\n> Open Tracetest in a browser to this environment\n  Stop this agent"),(0,r.kt)("p",null,"The Tracetest Agent is running in Docker and ready to accept traces."),(0,r.kt)("p",null,"gRPC: ",(0,r.kt)("inlineCode",{parentName:"p"},"http://<service-name>:4317")),(0,r.kt)("p",null,"HTTP: ",(0,r.kt)("inlineCode",{parentName:"p"},"http://<service-name>:4318/v1/traces")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Running a test against ",(0,r.kt)("inlineCode",{parentName:"p"},"localhost")," will resolve as ",(0,r.kt)("inlineCode",{parentName:"p"},"127.0.0.1")," inside the Tracetest Agent container."),(0,r.kt)("p",{parentName:"admonition"},"To run tests against apps running on your local machine you have two options:"),(0,r.kt)("ol",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ol"},"Run Tracetest Agent locally with the ",(0,r.kt)("inlineCode",{parentName:"li"},"tracetest start")," command."),(0,r.kt)("li",{parentName:"ol"},"Add Tracetest Agent to the same network and use service name mapping. ",(0,r.kt)("em",{parentName:"li"},"Example: Instead of running an app on ",(0,r.kt)("inlineCode",{parentName:"em"},"localhost:8080"),", add it to your Docker Compose file, connect it to the same network as your Tracetest Agent service, and use ",(0,r.kt)("inlineCode",{parentName:"em"},"<service-name>:8080")," in the URL field when creating a test."))),(0,r.kt)("p",{parentName:"admonition"},"You can reach services running on your local machine using:"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"Linux (docker version < 20.10.0): ",(0,r.kt)("inlineCode",{parentName:"li"},"172.17.0.1:8080")),(0,r.kt)("li",{parentName:"ul"},"MacOS (docker version >= 18.03) and Linux (docker version >= 20.10.0): ",(0,r.kt)("inlineCode",{parentName:"li"},"host.docker.internal:8080"))))),(0,r.kt)(o.Z,{value:"kubernetes",label:"Kubernetes",default:!0,mdxType:"TabItem"},(0,r.kt)(i.Z,{language:"text",title:"Terminal",mdxType:"CodeBlock"},"curl https://raw.githubusercontent.com/kubeshop/tracetest/main/k8s/agent/deploy-agent.sh | bash -s -- default <your_api_key>"),(0,r.kt)("p",null,"The Agent will start and open a browser. Sign in to Tracetest."),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1695990166/docs/screely-1695990151905_eb8yiw.png",alt:null})),(0,r.kt)("p",null,"Once signed in, return to the terminal."),(0,r.kt)(i.Z,{language:"text",title:"Expected output:",mdxType:"CodeBlock"},"Defaulting to only available Environment: localMode\n  INFO Connecting Agent with name local to Organization org_name and Environment localMode\n  INFO Starting Agent with name local...\nAgent is started! Leave the terminal open so tests can be run and traces gathered from this environment (env_name).\nYou can: [type to search]:\n> Open Tracetest in a browser to this environment\n  Stop this agent"),(0,r.kt)("p",null,"The Tracetest Agent is running in Kubernetes and ready to accept traces."),(0,r.kt)("p",null,"gRPC: ",(0,r.kt)("inlineCode",{parentName:"p"},"http://<service-name>:4317")),(0,r.kt)("p",null,"HTTP: ",(0,r.kt)("inlineCode",{parentName:"p"},"http://<service-name>:4318/v1/traces")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Running a test against ",(0,r.kt)("inlineCode",{parentName:"p"},"localhost")," will resolve as ",(0,r.kt)("inlineCode",{parentName:"p"},"127.0.0.1")," inside the Tracetest Agent container."),(0,r.kt)("p",{parentName:"admonition"},"To run tests against apps running on your local machine you have two options:"),(0,r.kt)("ol",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ol"},"Run Tracetest Agent locally with the ",(0,r.kt)("inlineCode",{parentName:"li"},"tracetest start")," command."),(0,r.kt)("li",{parentName:"ol"},"Add Tracetest Agent to the same network and use service name mapping. ",(0,r.kt)("em",{parentName:"li"},"Example: Instead of running an app on ",(0,r.kt)("inlineCode",{parentName:"em"},"localhost:8080"),", add it to your Docker Compose file, connect it to the same network as your Tracetest Agent service, and use ",(0,r.kt)("inlineCode",{parentName:"em"},"<service-name>:8080")," in the URL field when creating a test."))),(0,r.kt)("p",{parentName:"admonition"},"You can reach services running on your local machine using:"),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},"Linux (docker version < 20.10.0): ",(0,r.kt)("inlineCode",{parentName:"li"},"172.17.0.1:8080")),(0,r.kt)("li",{parentName:"ul"},"MacOS (docker version >= 18.03) and Linux (docker version >= 20.10.0): ",(0,r.kt)("inlineCode",{parentName:"li"},"host.docker.internal:8080")))))),(0,r.kt)("admonition",{title:"Don't have OpenTelemetry installed?",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{parentName:"p",href:"/getting-started/no-otel"},"Follow these instructions to install OpenTelemetry in 5 minutes without any code changes!"))))}k.isMDXComponent=!0}}]);