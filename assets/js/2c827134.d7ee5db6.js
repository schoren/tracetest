"use strict";(self.webpackChunktracetest_docs=self.webpackChunktracetest_docs||[]).push([[8989],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>k});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),p=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(a),u=r,k=m["".concat(l,".").concat(u)]||m[u]||d[u]||o;return a?n.createElement(k,i(i({ref:t},c),{},{components:a})):n.createElement(k,i({ref:t},c))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[m]="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=a[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},75025:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var n=a(87462),r=(a(67294),a(3905));const o={id:"testing-kafka-go-api-with-opentelemetry-tracetest",title:"Testing Kafka in a Go API with OpenTelemetry and Tracetest",description:"Use Tracetest to run trace-based tests against Kafka in a Go API.",hide_table_of_contents:!1,keywords:["tracetest","trace-based testing","observability","distributed tracing","testing"],image:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1689693872/docs/Blog_Thumbnail_28_ugy2yy.png"},i=void 0,s={unversionedId:"examples-tutorials/recipes/testing-kafka-go-api-with-opentelemetry-tracetest",id:"examples-tutorials/recipes/testing-kafka-go-api-with-opentelemetry-tracetest",title:"Testing Kafka in a Go API with OpenTelemetry and Tracetest",description:"Use Tracetest to run trace-based tests against Kafka in a Go API.",source:"@site/docs/examples-tutorials/recipes/testing-kafka-go-api-with-opentelemetry-tracetest.mdx",sourceDirName:"examples-tutorials/recipes",slug:"/examples-tutorials/recipes/testing-kafka-go-api-with-opentelemetry-tracetest",permalink:"/examples-tutorials/recipes/testing-kafka-go-api-with-opentelemetry-tracetest",draft:!1,editUrl:"https://github.com/kubeshop/tracetest/blob/main/docs/docs/examples-tutorials/recipes/testing-kafka-go-api-with-opentelemetry-tracetest.mdx",tags:[],version:"current",frontMatter:{id:"testing-kafka-go-api-with-opentelemetry-tracetest",title:"Testing Kafka in a Go API with OpenTelemetry and Tracetest",description:"Use Tracetest to run trace-based tests against Kafka in a Go API.",hide_table_of_contents:!1,keywords:["tracetest","trace-based testing","observability","distributed tracing","testing"],image:"https://res.cloudinary.com/djwdcmwdz/image/upload/v1689693872/docs/Blog_Thumbnail_28_ugy2yy.png"},sidebar:"examplesTutorialsSidebar",previous:{title:"\ud83c\udf71 Recipes",permalink:"/examples-tutorials/recipes"},next:{title:"Running Tracetest without a Trace Data Store",permalink:"/examples-tutorials/recipes/running-tracetest-without-a-trace-data-store"}},l={},p=[{value:"Sample Go APIs with OpenTelemetry Collector, Jaeger and Tracetest",id:"sample-go-apis-with-opentelemetry-collector-jaeger-and-tracetest",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Project Structure",id:"project-structure",level:2},{value:"1. Go APIs",id:"1-go-apis",level:3},{value:"2. Tracetest",id:"2-tracetest",level:3},{value:"Docker Compose Network",id:"docker-compose-network",level:3},{value:"Go Producer API",id:"go-producer-api",level:2},{value:"Go Consumer Worker",id:"go-consumer-worker",level:2},{value:"Tracetest",id:"tracetest",level:2},{value:"Run Both the Go Apps and Tracetest",id:"run-both-the-go-apps-and-tracetest",level:2},{value:"Learn More",id:"learn-more",level:2}],c={toc:p},m="wrapper";function d(e){let{components:t,...a}=e;return(0,r.kt)(m,(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{parentName:"p",href:"https://github.com/kubeshop/tracetest/tree/main/examples/quick-start-go-and-kafka"},"Check out the source code on GitHub here.")," ")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://tracetest.io/"},"Tracetest")," is a testing tool based on ",(0,r.kt)("a",{parentName:"p",href:"https://opentelemetry.io/"},"OpenTelemetry")," that allows you to test your distributed application. It allows you to use data from distributed traces generated by OpenTelemetry to validate and assert if your application has the desired behavior defined by your test definitions."),(0,r.kt)("h2",{id:"sample-go-apis-with-opentelemetry-collector-jaeger-and-tracetest"},"Sample Go APIs with OpenTelemetry Collector, Jaeger and Tracetest"),(0,r.kt)("p",null,"This is a simple quick start on how to configure two Go APIs to communicate via Kafka. They use OpenTelemetry instrumentation with traces, Jaeger as a trace data store, and Tracetest for enhancing your E2E and integration tests with trace-based testing."),(0,r.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("p",null,"You will need ",(0,r.kt)("a",{parentName:"p",href:"https://docs.docker.com/get-docker/"},"Docker")," and ",(0,r.kt)("a",{parentName:"p",href:"https://docs.docker.com/compose/install/"},"Docker Compose")," installed on your machine to run this quick start app!"),(0,r.kt)("h2",{id:"project-structure"},"Project Structure"),(0,r.kt)("p",null,"The project is built with Docker Compose. It contains one ",(0,r.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," file that configures Tracetest, Jaeger, OpenTelemetry Collector, and both Go apps."),(0,r.kt)("h3",{id:"1-go-apis"},"1. Go APIs"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," file references two Go apps, and one Kafka stream."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Producer API: Builds the ",(0,r.kt)("inlineCode",{parentName:"li"},"./producer-api/Dockerfile")),(0,r.kt)("li",{parentName:"ul"},"Consumer Worker: Builds the ",(0,r.kt)("inlineCode",{parentName:"li"},"./consumer-worker/Dockerfile"))),(0,r.kt)("p",null,"The producer publishes a message to Kafka when receiving a POST request to the ",(0,r.kt)("inlineCode",{parentName:"p"},"/publish")," endpoint."),(0,r.kt)("p",null,"The consumer accepts a message through Kafka."),(0,r.kt)("h3",{id:"2-tracetest"},"2. Tracetest"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"collector.config.yaml"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"tracetest-provision.yaml"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"tracetest-config.yaml")," in the ",(0,r.kt)("inlineCode",{parentName:"p"},"tracetest")," directory are for the setting up Tracetest and the OpenTelemetry Collector."),(0,r.kt)("h3",{id:"docker-compose-network"},"Docker Compose Network"),(0,r.kt)("p",null,"All ",(0,r.kt)("inlineCode",{parentName:"p"},"services")," in the ",(0,r.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," are on the same network and will be reachable by hostname from within other services. E.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"jaeger:4317")," in the ",(0,r.kt)("inlineCode",{parentName:"p"},"collector.config.yaml")," will map to the ",(0,r.kt)("inlineCode",{parentName:"p"},"jaeger")," service, where the port ",(0,r.kt)("inlineCode",{parentName:"p"},"4317")," is the port where Jaeger accepts traces."),(0,r.kt)("h2",{id:"go-producer-api"},"Go Producer API"),(0,r.kt)("p",null,"The Go API is a simple HTTP server, ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/kubeshop/tracetest/blob/main/examples/quick-start-go-and-kafka/producer-api/main.go"},"contained in the ",(0,r.kt)("inlineCode",{parentName:"a"},"main.go")," file"),"."),(0,r.kt)("p",null,"The OpenTelemetry tracing is ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/kubeshop/tracetest/blob/main/examples/quick-start-go-and-kafka/producer-api/telemetry/telemetry.go"},"contained in the ",(0,r.kt)("inlineCode",{parentName:"a"},"./telemetry/telemetry.go")," file"),".\nTraces will be sent to the OpenTelemetry Collector, and forwarded to Jaeger."),(0,r.kt)("p",null,"Traces will be sent to either the ",(0,r.kt)("inlineCode",{parentName:"p"},"grpc")," endpoint. The hostname and port as seen in the env section of the ",(0,r.kt)("inlineCode",{parentName:"p"},"producer-api")," in the ",(0,r.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," is:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"OTEL_EXPORTER_OTLP_ENDPOINT=otel-collector:4317"))),(0,r.kt)("p",null,"The server starts by running the ",(0,r.kt)("inlineCode",{parentName:"p"},"main.go")," file."),(0,r.kt)("p",null,"As you can see ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/kubeshop/tracetest/blob/main/examples/quick-start-go-and-kafka/producer-api/Dockerfile"},"in the ",(0,r.kt)("inlineCode",{parentName:"a"},"Dockerfile")),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-Dockerfile"},'FROM golang:alpine as builder\nENV GO111MODULE=on\nRUN apk update && apk add --no-cache git\n\nWORKDIR /app\nCOPY go.mod ./\nCOPY go.sum ./\nRUN go mod download\nCOPY . .\nRUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o ./bin/main .\n\nFROM scratch\nCOPY --from=builder /app/bin/main .\nCMD ["./main"]\n')),(0,r.kt)("p",null,"And, ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/kubeshop/tracetest/blob/3caff14247d745035f7cbbb68a7208f6da4e51fd/examples/quick-start-go-and-kafka/docker-compose.yaml#L3C3-L21C1"},"the ",(0,r.kt)("inlineCode",{parentName:"a"},"docker-compose.yaml")," contains one service")," for the Go Producer API."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'  producer-api:\n    image: quick-start-producer-api\n    platform: linux/amd64\n    build: ./producer-api\n    extra_hosts:\n      - "host.docker.internal:host-gateway"\n    ports:\n      - 8080:8080\n    environment:\n      - OTEL_EXPORTER_OTLP_ENDPOINT=otel-collector:4317\n      - OTEL_SERVICE_NAME=producer-api\n      - KAFKA_BROKER_URL=kafka:9092\n      - KAFKA_TOPIC=messaging\n    depends_on:\n      otel-collector:\n        condition: service_started\n      kafka:\n        condition: service_healthy\n')),(0,r.kt)("h2",{id:"go-consumer-worker"},"Go Consumer Worker"),(0,r.kt)("p",null,"The Go API is a simple HTTP server, ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/kubeshop/tracetest/blob/main/examples/quick-start-go-and-kafka/producer-api/main.go"},"contained in the ",(0,r.kt)("inlineCode",{parentName:"a"},"main.go")," file"),"."),(0,r.kt)("p",null,"The OpenTelemetry tracing is ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/kubeshop/tracetest/blob/main/examples/quick-start-go-and-kafka/producer-api/telemetry/telemetry.go"},"contained in the ",(0,r.kt)("inlineCode",{parentName:"a"},"./telemetry/telemetry.go")," file"),".\nTraces will be sent to the OpenTelemetry Collector, and forwarded to Jaeger."),(0,r.kt)("p",null,"Traces will be sent to either the ",(0,r.kt)("inlineCode",{parentName:"p"},"grpc")," endpoint. The hostname and port as seen in the env section of the ",(0,r.kt)("inlineCode",{parentName:"p"},"producer-api")," in the ",(0,r.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," is:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"OTEL_EXPORTER_OTLP_ENDPOINT=otel-collector:4317"))),(0,r.kt)("p",null,"The server starts by running the ",(0,r.kt)("inlineCode",{parentName:"p"},"main.go")," file."),(0,r.kt)("p",null,"As you can see ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/kubeshop/tracetest/blob/main/examples/quick-start-go-and-kafka/producer-api/Dockerfile"},"in the ",(0,r.kt)("inlineCode",{parentName:"a"},"Dockerfile")),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-Dockerfile"},'FROM golang:alpine as builder\nENV GO111MODULE=on\nRUN apk update && apk add --no-cache git\n\nWORKDIR /app\nCOPY go.mod ./\nCOPY go.sum ./\nRUN go mod download\nCOPY . .\nRUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o ./bin/main .\n\nFROM scratch\nCOPY --from=builder /app/bin/main .\nCMD ["./main"]\n')),(0,r.kt)("p",null,"And, ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/kubeshop/tracetest/blob/3caff14247d745035f7cbbb68a7208f6da4e51fd/examples/quick-start-go-and-kafka/docker-compose.yaml#L3C3-L21C1"},"the ",(0,r.kt)("inlineCode",{parentName:"a"},"docker-compose.yaml")," contains one service")," for the Go Producer API."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'  producer-api:\n    image: quick-start-producer-api\n    platform: linux/amd64\n    build: ./producer-api\n    extra_hosts:\n      - "host.docker.internal:host-gateway"\n    ports:\n      - 8080:8080\n    environment:\n      - OTEL_EXPORTER_OTLP_ENDPOINT=otel-collector:4317\n      - OTEL_SERVICE_NAME=producer-api\n      - KAFKA_BROKER_URL=kafka:9092\n      - KAFKA_TOPIC=messaging\n    depends_on:\n      otel-collector:\n        condition: service_started\n      kafka:\n        condition: service_healthy\n')),(0,r.kt)("h2",{id:"tracetest"},"Tracetest"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," configures four services more including Tracetest."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Postgres")," - Postgres is a prerequisite for Tracetest to work. It stores trace data when running the trace-based tests."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://opentelemetry.io/docs/collector/"},(0,r.kt)("strong",{parentName:"a"},"OpenTelemetry Collector"))," - A vendor-agnostic implementation of how to receive, process and export telemetry data."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.jaegertracing.io/"},(0,r.kt)("strong",{parentName:"a"},"Jaeger"))," - Open source, distributed tracing platform. Monitor and troubleshoot workflows in complex distributed systems."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://tracetest.io/"},(0,r.kt)("strong",{parentName:"a"},"Tracetest"))," - Trace-based testing that generates end-to-end tests automatically from traces.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'  tracetest:\n    image: kubeshop/tracetest:${TAG:-latest}\n    platform: linux/amd64\n    volumes:\n      - type: bind\n        source: ./tracetest/tracetest-config.yaml\n        target: /app/tracetest.yaml\n      - type: bind\n        source: ./tracetest/tracetest-provision.yaml\n        target: /app/provisioning.yaml\n    ports:\n      - 11633:11633\n    command: --provisioning-file /app/provisioning.yaml\n    depends_on:\n      postgres:\n        condition: service_healthy\n      otel-collector:\n        condition: service_started\n      jaeger:\n        condition: service_started\n    healthcheck:\n      test: ["CMD", "wget", "--spider", "localhost:11633"]\n      interval: 1s\n      timeout: 3s\n      retries: 60\n    environment:\n      TRACETEST_DEV: ${TRACETEST_DEV}\n\n  postgres:\n    image: postgres:14\n    environment:\n      POSTGRES_PASSWORD: postgres\n      POSTGRES_USER: postgres\n    healthcheck:\n      test: pg_isready -U "$$POSTGRES_USER" -d "$$POSTGRES_DB"\n      interval: 1s\n      timeout: 5s\n      retries: 60\n    ports:\n      - 5432:5432\n\n  otel-collector:\n    image: otel/opentelemetry-collector-contrib:0.59.0\n    command:\n      - "--config"\n      - "/otel-local-config.yaml"\n    volumes:\n      - ./tracetest/collector.config.yaml:/otel-local-config.yaml\n    ports:\n      - 4317:4317\n    depends_on:\n      jaeger:\n        condition: service_started\n\n  jaeger:\n    image: jaegertracing/all-in-one:latest\n    restart: unless-stopped\n    ports:\n      - 16686:16686\n      - 16685:16685\n    environment:\n      - COLLECTOR_OTLP_ENABLED=true\n    healthcheck:\n      test: ["CMD", "wget", "--spider", "localhost:16686"]\n      interval: 1s\n      timeout: 3s\n      retries: 60\n')),(0,r.kt)("p",null,"Tracetest depends on all three services, Postgres, Jaeger, and the OpenTelemetry Collector. Both Tracetest and the OpenTelemetry Collector require config files to be loaded via a volume. The volumes are mapped from the root directory into the ",(0,r.kt)("inlineCode",{parentName:"p"},"tracetest")," directory and the respective config files."),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/kubeshop/tracetest/blob/main/examples/quick-start-go-and-kafka/tracetest/tracetest-config.yaml"},"The ",(0,r.kt)("inlineCode",{parentName:"a"},"tracetest-config.yaml")," file")," contains the basic setup of connecting Tracetest to the Postgres instance."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"postgres:\n  host: postgres\n  user: postgres\n  password: postgres\n  port: 5432\n  dbname: postgres\n  params: sslmode=disable\n")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/kubeshop/tracetest/blob/main/examples/quick-start-go-and-kafka/tracetest/tracetest-provision.yaml"},"The ",(0,r.kt)("inlineCode",{parentName:"a"},"tracetest-provision.yaml")," file")," provisions the trace data store and polling to store in the Postgres database. The data store is set to OTLP, meaning the traces will be stored in Tracetest itself."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"---\ntype: PollingProfile\nspec:\n  name: Default\n  strategy: periodic\n  default: true\n  periodic:\n    retryDelay: 5s\n    timeout: 10m\n\n---\ntype: DataStore\nspec:\n  name: Jaeger\n  type: jaeger\n  default: true\n  jaeger:\n    endpoint: jaeger:16685\n    tls:\n      insecure: true\n")),(0,r.kt)("p",null,"But how are traces sent to Tracetest?"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/kubeshop/tracetest/blob/main/examples/quick-start-go-and-kafka/tracetest/collector.config.yaml"},"The ",(0,r.kt)("inlineCode",{parentName:"a"},"collector.config.yaml")," explains that"),". It receives traces via the ",(0,r.kt)("inlineCode",{parentName:"p"},"grpc")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"http"),". Then, exports them to Jaeger's OLTP endpoint ",(0,r.kt)("inlineCode",{parentName:"p"},"jaeger:4317"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"receivers:\n  otlp:\n    protocols:\n      grpc:\n      http:\n\nprocessors:\n  batch:\n    timeout: 100ms\n\nexporters:\n  logging:\n    loglevel: debug\n  otlp/jaeger:\n    endpoint: jaeger:4317\n    tls:\n      insecure: true\n\nservice:\n  pipelines:\n    traces/1:\n      receivers: [otlp]\n      processors: [batch]\n      exporters: [otlp/jaeger]\n")),(0,r.kt)("h2",{id:"run-both-the-go-apps-and-tracetest"},"Run Both the Go Apps and Tracetest"),(0,r.kt)("p",null,"To start both Go apps and Tracetest we will run this command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker-compose up # add --build if the images are not built already\n")),(0,r.kt)("p",null,"This will start your Tracetest instance on ",(0,r.kt)("inlineCode",{parentName:"p"},"http://localhost:11633/"),"."),(0,r.kt)("p",null,"Open the URL and start creating tests! Make sure to use the ",(0,r.kt)("inlineCode",{parentName:"p"},"http://producer-api:8080/publish")," URL in your test creation, because your Go app and Tracetest are in the same network."),(0,r.kt)("p",null,"Here are two sample tests you can get started with quickly."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/kubeshop/tracetest/blob/main/examples/quick-start-go-and-kafka/test-consumer.yaml"},"Testing the Consumer")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/kubeshop/tracetest/blob/main/examples/quick-start-go-and-kafka/test-producer.yaml"},"Testing the Producer"))),(0,r.kt)("h2",{id:"learn-more"},"Learn More"),(0,r.kt)("p",null,"Feel free to check out our ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/kubeshop/tracetest/tree/main/examples"},"examples in GitHub")," and join our ",(0,r.kt)("a",{parentName:"p",href:"https://discord.gg/8MtcMrQNbX"},"Discord Community")," for more info!"))}d.isMDXComponent=!0}}]);