"use strict";(self.webpackChunktracetest_docs=self.webpackChunktracetest_docs||[]).push([[2108],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=p(n),c=r,h=d["".concat(l,".").concat(c)]||d[c]||m[c]||i;return n?a.createElement(h,o(o({ref:t},u),{},{components:n})):a.createElement(h,o({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:r,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},86116:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const i={},o="Defining Tests as Text Files",s={unversionedId:"cli/creating-tests",id:"cli/creating-tests",title:"Defining Tests as Text Files",description:"One important aspect of testing your code is the ability to quickly implement changes while not breaking your application. If you change your application, it is important to be able to update your tests and run them against your new implementation as soon as possible for a timely development feedback loop.",source:"@site/docs/cli/creating-tests.md",sourceDirName:"cli",slug:"/cli/creating-tests",permalink:"/cli/creating-tests",draft:!1,editUrl:"https://github.com/kubeshop/tracetest/blob/main/docs/docs/cli/creating-tests.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Defining Data Stores as Text Files",permalink:"/cli/creating-data-stores"},next:{title:"Defining Test Specifications in Text Files",permalink:"/cli/creating-test-specifications"}},l={},p=[{value:"Motivation",id:"motivation",level:2},{value:"Definition",id:"definition",level:2},{value:"Test Information",id:"test-information",level:2},{value:"Trigger",id:"trigger",level:2},{value:"HTTP Trigger",id:"http-trigger",level:3},{value:"Authentication",id:"authentication",level:4},{value:"Body",id:"body",level:4},{value:"Generator Functions",id:"generator-functions",level:3}],u={toc:p},d="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"defining-tests-as-text-files"},"Defining Tests as Text Files"),(0,r.kt)("p",null,"One important aspect of testing your code is the ability to quickly implement changes while not breaking your application. If you change your application, it is important to be able to update your tests and run them against your new implementation as soon as possible for a timely development feedback loop."),(0,r.kt)("p",null,"As Tracetest is mainly a visual tool, this might make it difficult to update tests in an auditable way and execute those changes only when we are sure the application has been deployed with the new changes. With that in mind, we built a new way for you to define your tests: using a YAML test definition!"),(0,r.kt)("h2",{id:"motivation"},"Motivation"),(0,r.kt)("p",null,"Imagine that you were assigned a ticket to improve your application database usage. You notice that every time a specific endpoint is called, your application executes ",(0,r.kt)("inlineCode",{parentName:"p"},"N+1")," select statements on the database instead of only one statement. You probably already have a test in place to ensure the correct functionality of that endpoint: it inserts the necessary information into the database, calls that specific endpoint using our tool and ensures you get the expected results using the trace generated by your application. It works fine, but there is a problem. That test is managed by Tracetest on its server and the test cannot be changed until the new patch is deployed. Otherwise, if the test is run using a non-patched version of the application, the test would fail."),(0,r.kt)("p",null,"To solve that, the best approach would be to enable developers to define their tests as text files and allow them to run those tests using a CLI, so you can integrate the execution of those tests to your existing CI pipeline. There are many benefits of this functionality for your tests:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Peers can review your tests before merging them to the main branch."),(0,r.kt)("li",{parentName:"ul"},"Ensure your test works before merging it to the main branch."),(0,r.kt)("li",{parentName:"ul"},"Have different versions of the same test running in parallel in different branches, so you and your peers can work on the same code modules and update the same test without interfering with each other.")),(0,r.kt)("h2",{id:"definition"},"Definition"),(0,r.kt)("p",null,"The definition can be broken into three parts: ",(0,r.kt)("inlineCode",{parentName:"p"},"test information")," including ",(0,r.kt)("inlineCode",{parentName:"p"},"triggering transaction"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"assertions"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"outputs"),". Here is a real test we have on Tracetest to test our Pokemon demo API:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'type: Test\nspec:\n  name: DEMO Pokemon - Import - Import a Pokemon\n  description: "Import a pokemon"\n  trigger:\n    type: http\n    httpRequest:\n      url: http://demo-pokemon-api.demo/pokemon/import\n      method: POST\n      headers:\n      - key: Content-Type\n        value: application/json\n      body: \'{ "id": 52 }\'\n  specs:\n    - selector: span[name = "POST /pokemon/import"]\n      assertions:\n        - attr:tracetest.span.duration <= 500ms\n        - attr:http.status_code = 200\n    - selector: span[name = "send message to queue"]\n      assertions:\n        - attr:messaging.message.payload contains 52\n    - selector: span[name = "consume message from queue"]:last\n      assertions:\n        - attr:messaging.message.payload contains 52\n    - selector: span[name = "consume message from queue"]:last span[name = "import pokemon\n        from pokeapi"]\n      assertions:\n        - attr:http.status_code = 200\n    - selector: span[name = "consume message from queue"]:last span[name = "save pokemon\n        on database"]\n      assertions:\n        - attr:db.repository.operation = "create"\n        - attr:tracetest.span.duration <= 500ms\n  outputs:\n    - name: POKEMON_ID\n      selector: span[name = "POST /pokemon/import"]\n      value: attr:http.response.body | json_path \'.id\'\n\n')),(0,r.kt)("h2",{id:"test-information"},"Test Information"),(0,r.kt)("p",null,"Currently, you can only define the test name."),(0,r.kt)("h2",{id:"trigger"},"Trigger"),(0,r.kt)("p",null,"This section defines how Tracetest will interact with your application: send an HTTP request, a GRPC call, send a message to a message broker, etc. Currently, only HTTP calls are supported, please let us know any other triggering mechanism that you require to test your application."),(0,r.kt)("p",null,"The attribute ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," defines which trigger method you are going to use to interact with your application. The rest of the attributes in this section rely on the value you define there."),(0,r.kt)("h3",{id:"http-trigger"},"HTTP Trigger"),(0,r.kt)("p",null,"When defining a HTTP trigger, you are required to define a ",(0,r.kt)("inlineCode",{parentName:"p"},"httpRequest")," object containing the request Tracetest will send to your system, this is where you define: ",(0,r.kt)("inlineCode",{parentName:"p"},"url"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"method"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"headers"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"authentication"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"body"),"."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Note: Some APIs require the ",(0,r.kt)("inlineCode",{parentName:"p"},"Content-Type")," header to respond. If you are not able to trigger your application, check if you are sending this header and if its value is correct.")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"trigger:\n  type: http\n  httpRequest:\n    url: http://demo-pokemon-api.demo/pokemon/import\n    method: POST\n    headers:\n    - key: Content-Type\n      value: application/json\n    body: '{ \"id\": 52 }'\n")),(0,r.kt)("h4",{id:"authentication"},"Authentication"),(0,r.kt)("p",null,"Currently, we support three authentication methods for HTTP requests: ",(0,r.kt)("inlineCode",{parentName:"p"},"basic authentication"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"api key"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"bearer token"),". Here is one example of each authentication method:"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Basic Authentication")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"trigger:\n    type: http\n    httpRequest:\n        url: http://my-api.com\n        method: GET\n        authentication:\n            type: basic\n            basic:\n                user: my-username\n                password: mypassword\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"API Key Authentication")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'trigger:\n    type: http\n    httpRequest:\n        url: http://my-api.com\n        method: GET\n        authentication:\n            type: apiKey\n            apiKey:\n                key: X-Key\n                value: my-key\n                in: header # Either "header" or "query"\n')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Bearer Token Authentication")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"trigger:\n    type: http\n    httpRequest:\n        url: http://my-api.com\n        method: GET\n        authentication:\n            type: bearer\n            bearer:\n                token: my-token\n")),(0,r.kt)("h4",{id:"body"},"Body"),(0,r.kt)("p",null,"Currently, Testkube supports ",(0,r.kt)("inlineCode",{parentName:"p"},"raw")," body types that enable you to send text formats over HTTP: JSON, for example."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'trigger:\n    type: http\n    httpRequest:\n        url: http://my-api.com\n        method: POST\n        body: \'{"name": "my Json Object"}\'\n')),(0,r.kt)("h3",{id:"generator-functions"},"Generator Functions"),(0,r.kt)("p",null,"Sometimes we want to randomize our test data. Maybe we want to try new values or maybe we know our API will fail if the same id is provided more than once. For this use case, you can define generator functions in the test trigger."),(0,r.kt)("p",null,"Generator functions can be invoked as part of expressions. Therefore, you only need to invoke it as ",(0,r.kt)("inlineCode",{parentName:"p"},"uuid()"),". However, you might want to generate values and concatenate them with static texts as well. For this, you can use the string interpolation feature: ",(0,r.kt)("inlineCode",{parentName:"p"},'"your user id is ${uuid()}'),"."),(0,r.kt)("p",null,"Available functions:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Function"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"uuid()")),(0,r.kt)("td",{parentName:"tr",align:null},"Generates a random v4 uuid.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"firstName()")),(0,r.kt)("td",{parentName:"tr",align:null},"Generates a random English first name.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"lastName()")),(0,r.kt)("td",{parentName:"tr",align:null},"Generates a random English last name.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"fullName()")),(0,r.kt)("td",{parentName:"tr",align:null},"Generates a random English first and last name.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"email()")),(0,r.kt)("td",{parentName:"tr",align:null},"Generates a random email address.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"phone()")),(0,r.kt)("td",{parentName:"tr",align:null},"Generates a random phone number.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"creditCard()")),(0,r.kt)("td",{parentName:"tr",align:null},"Generates a random credit card number (from 12 to 19 digits).")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"creditCardCvv()")),(0,r.kt)("td",{parentName:"tr",align:null},"Generates a random credit card cvv (3 digits).")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"creditCardExpDate()")),(0,r.kt)("td",{parentName:"tr",align:null},"Generates a random credit card expiration date (mm/yy).")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"randomInt(min, max)")),(0,r.kt)("td",{parentName:"tr",align:null},"Generates a random integer contained in the closed interval defined by ","[",(0,r.kt)("inlineCode",{parentName:"td"},"min"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"max"),"]",".")))),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{parentName:"p",href:"/cli/creating-test-specifications"},"Continue reading about Test Specs, here."))),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{parentName:"p",href:"/cli/creating-test-outputs"},"Continue reading about Test Outputs, here."))))}m.isMDXComponent=!0}}]);