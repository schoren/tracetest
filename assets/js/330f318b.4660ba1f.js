"use strict";(self.webpackChunktracetest_docs=self.webpackChunktracetest_docs||[]).push([[4853],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=l(n),d=o,h=u["".concat(p,".").concat(d)]||u[d]||m[d]||a;return n?r.createElement(h,s(s({ref:t},c),{},{components:n})):r.createElement(h,s({ref:t},c))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[u]="string"==typeof e?e:o,s[1]=i;for(var l=2;l<a;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},94756:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var r=n(87462),o=(n(67294),n(3905));const a={},s="Running Tracetest with Azure App Insights (Node.js + OpenTelemetry Collector)",i={unversionedId:"examples-tutorials/recipes/running-tracetest-with-azure-app-insights-collector",id:"examples-tutorials/recipes/running-tracetest-with-azure-app-insights-collector",title:"Running Tracetest with Azure App Insights (Node.js + OpenTelemetry Collector)",description:"Check out the source code on GitHub here.",source:"@site/docs/examples-tutorials/recipes/running-tracetest-with-azure-app-insights-collector.md",sourceDirName:"examples-tutorials/recipes",slug:"/examples-tutorials/recipes/running-tracetest-with-azure-app-insights-collector",permalink:"/examples-tutorials/recipes/running-tracetest-with-azure-app-insights-collector",draft:!1,editUrl:"https://github.com/kubeshop/tracetest/blob/main/docs/docs/examples-tutorials/recipes/running-tracetest-with-azure-app-insights-collector.md",tags:[],version:"current",frontMatter:{},sidebar:"examplesTutorialsSidebar",previous:{title:"Running Tracetest with Azure App Insights (ApplicationInsights Node.js SDK)",permalink:"/examples-tutorials/recipes/running-tracetest-with-azure-app-insights"},next:{title:"Running Tracetest with Azure App Insights (OpenTelemetry Collector & Pokeshop API)",permalink:"/examples-tutorials/recipes/running-tracetest-with-azure-app-insights-pokeshop"}},p={},l=[{value:"Sample Node.js App with Azure App Insights, The OpenTelemetry Collector and Tracetest",id:"sample-nodejs-app-with-azure-app-insights-the-opentelemetry-collector-and-tracetest",level:2},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Project Structure",id:"project-structure",level:2},{value:"1. Node.js App",id:"1-nodejs-app",level:3},{value:"2. Tracetest",id:"2-tracetest",level:3},{value:"Docker Compose Network",id:"docker-compose-network",level:3},{value:"Node.js App",id:"nodejs-app",level:2},{value:"Tracetest",id:"tracetest",level:2},{value:"Run Both the Node.js App and Tracetest",id:"run-both-the-nodejs-app-and-tracetest",level:2},{value:"Learn More",id:"learn-more",level:2}],c={toc:l},u="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"running-tracetest-with-azure-app-insights-nodejs--opentelemetry-collector"},"Running Tracetest with Azure App Insights (Node.js + OpenTelemetry Collector)"),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("a",{parentName:"p",href:"https://github.com/kubeshop/tracetest/tree/main/examples/tracetest-azure-app-insights-collector"},"Check out the source code on GitHub here."))),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://tracetest.io/"},"Tracetest")," is a testing tool based on ",(0,o.kt)("a",{parentName:"p",href:"https://opentelemetry.io/"},"OpenTelemetry")," that allows you to test your distributed application. It allows you to use data from distributed traces generated by OpenTelemetry to validate and assert if your application has the desired behavior defined by your test definitions."),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/azure/azure-monitor/app/app-insights-overview"},"Azure Application Insights")," is an extension of Azure Monitor and provides application performance monitoring (APM) features. APM tools are useful to monitor applications from development, through test, and into production in the following ways:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Proactively understand how an application is performing."),(0,o.kt)("li",{parentName:"ul"},"Reactively review application execution data to determine the cause of an incident.")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/open-telemetry/opentelemetry-collector-contrib"},"OpenTelemetry Collector Contrib")," - The official OpenTelemetry Distribution for packages outside of the core collector."),(0,o.kt)("h2",{id:"sample-nodejs-app-with-azure-app-insights-the-opentelemetry-collector-and-tracetest"},"Sample Node.js App with Azure App Insights, The OpenTelemetry Collector and Tracetest"),(0,o.kt)("p",null,"This is a simple quick start guide on how to configure a Node.js app to use instrumentation with traces and Tracetest for enhancing your E2E and integration tests with trace-based testing. The infrastructure will use Azure App Insights as the trace data store, the OpenTelemetry Collector to process and route the telemetry data and a Node.js app to generate it."),(0,o.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,o.kt)("p",null,"You will need ",(0,o.kt)("a",{parentName:"p",href:"https://docs.docker.com/get-docker/"},"Docker")," and ",(0,o.kt)("a",{parentName:"p",href:"https://docs.docker.com/compose/install/"},"Docker Compose")," installed on your machine to run this quick start app!"),(0,o.kt)("p",null,"And the ",(0,o.kt)("a",{parentName:"p",href:"https://learn.microsoft.com/en-us/azure/bot-service/bot-service-resources-app-insights-keys?view=azure-bot-service-4.0"},"App Insights Instrumentation Key")," from your instance."),(0,o.kt)("h2",{id:"project-structure"},"Project Structure"),(0,o.kt)("p",null,"The project is built with Docker Compose."),(0,o.kt)("h3",{id:"1-nodejs-app"},"1. Node.js App"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"Dockerfile")," and the ",(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," in the root directory is for the Node.js app."),(0,o.kt)("h3",{id:"2-tracetest"},"2. Tracetest"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," file, ",(0,o.kt)("inlineCode",{parentName:"p"},"tracetest.provision.yaml"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"tracetest-config.yaml")," in the ",(0,o.kt)("inlineCode",{parentName:"p"},"tracetest")," directory are for the setting up the Node.js App and Tracetest."),(0,o.kt)("h3",{id:"docker-compose-network"},"Docker Compose Network"),(0,o.kt)("p",null,"All ",(0,o.kt)("inlineCode",{parentName:"p"},"services")," in the ",(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," are on the same network and will be reachable by hostname from within other services."),(0,o.kt)("h2",{id:"nodejs-app"},"Node.js App"),(0,o.kt)("p",null,"The Node.js app is a simple Express app, contained in the ",(0,o.kt)("inlineCode",{parentName:"p"},"src/index.js")," file."),(0,o.kt)("p",null,"It is instrumented using the ",(0,o.kt)("a",{parentName:"p",href:"https://www.npmjs.com/package/@opentelemetry/sdk-node"},"Official OpenTelemetry Node.js SDK")," wrapping the application code to send telemetry data to the OpenTelemetry Collector."),(0,o.kt)("p",null,"The following is the instrumentation code from the ",(0,o.kt)("inlineCode",{parentName:"p"},"src/tracing.js")," file."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"const opentelemetry = require('@opentelemetry/sdk-node')\nconst { getNodeAutoInstrumentations } = require('@opentelemetry/auto-instrumentations-node')\nconst { OTLPTraceExporter } = require('@opentelemetry/exporter-trace-otlp-grpc');\n\nconst sdk = new opentelemetry.NodeSDK({\n  traceExporter: new OTLPTraceExporter({ url: 'http://otel-collector:4317' }),\n  instrumentations: [getNodeAutoInstrumentations()],\n  serviceName: 'tracetest-azure-app-insights-collector'\n})\nsdk.start()\n")),(0,o.kt)("p",null,"To start the server, run this command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm start\n")),(0,o.kt)("p",null,"As you can see the ",(0,o.kt)("inlineCode",{parentName:"p"},"Dockerfile")," uses the command above."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-Dockerfile"},'FROM node:slim\nWORKDIR /usr/src/app\n\nCOPY ./src/package*.json ./\n\nRUN npm install\nCOPY ./src .\n\nEXPOSE 3000\nCMD [ "npm", "start" ]\n')),(0,o.kt)("h2",{id:"tracetest"},"Tracetest"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"docker-compose.yaml")," includes three other services."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"Postgres")," - Postgres is a prerequisite for Tracetest to work. It stores trace data when running the trace-based tests."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://tracetest.io/"},(0,o.kt)("strong",{parentName:"a"},"Tracetest"))," - Trace-based testing that generates end-to-end tests automatically from traces."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/open-telemetry/opentelemetry-collector-contrib"},(0,o.kt)("strong",{parentName:"a"},"OpenTelemetry Collector Contrib"))," - The official Open Telemetry Distribution for packages outside of the core collector.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'services:\n  postgres:\n    environment:\n      POSTGRES_PASSWORD: postgres\n      POSTGRES_USER: postgres\n    healthcheck:\n      test:\n        - CMD-SHELL\n        - pg_isready -U "$$POSTGRES_USER" -d "$$POSTGRES_DB"\n      timeout: 5s\n      interval: 1s\n      retries: 60\n    image: postgres:14\n    networks:\n      default: null\n    ports:\n      - mode: ingress\n        target: 5432\n        published: 5432\n        protocol: tcp\n  tracetest:\n    command: --provisioning-file /app/provision.yaml\n    platform: linux/amd64\n    depends_on:\n      postgres:\n        condition: service_healthy\n    environment:\n      TRACETEST_DEV: ${TRACETEST_DEV}\n    extra_hosts:\n      host.docker.internal: host-gateway\n    healthcheck:\n      test:\n        - CMD\n        - wget\n        - --spider\n        - localhost:11633\n      timeout: 3s\n      interval: 1s\n      retries: 60\n    image: kubeshop/tracetest:${TAG:-latest}\n    networks:\n      default: null\n    ports:\n      - mode: ingress\n        target: 11633\n        published: 11633\n        protocol: tcp\n    volumes:\n      - type: bind\n        source: tracetest/tracetest.yaml\n        target: /app/tracetest.yaml\n      - type: bind\n        source: tracetest/tracetest-provision.yaml\n        target: /app/provision.yaml\n  otel-collector:\n    image: otel/opentelemetry-collector-contrib:latest\n    command:\n      - "--config"\n      - "/otel-local-config.yaml"\n    volumes:\n      - ./collector.config.yaml:/otel-local-config.yaml\n    environment:\n      INSTRUMENTATION_KEY: ${INSTRUMENTATION_KEY}\n    ports:\n      - 4317:4317\nnetworks:\n  default:\n    name: _default\n')),(0,o.kt)("p",null,"Tracetest depends on Postgres and requires config files to be loaded via a volume. The volumes are mapped from the root directory into the ",(0,o.kt)("inlineCode",{parentName:"p"},"root")," directory and the respective config files."),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"tracetest.config.yaml")," file contains the basic setup of connecting Tracetest to the Postgres instance."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"postgres:\n  host: postgres\n  user: postgres\n  password: postgres\n  port: 5432\n  dbname: postgres\n  params: sslmode=disable\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"tracetest.provision.yaml")," file defines the trace data store, set to Azure App Insights using the collector connection, meaning the traces will be sent to the OpenTelemetry collector to be processed and routed to both Tracetest and the Azure cloud."),(0,o.kt)("p",null,"But how does Tracetest fetch traces?"),(0,o.kt)("p",null,"The OpenTelemetry collector is configured with the ",(0,o.kt)("inlineCode",{parentName:"p"},"azuremonitor")," and the ",(0,o.kt)("inlineCode",{parentName:"p"},"otlp/tracetest")," exporter and sending telemetry data to both the Azure Cloud and Tracetest."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"receivers:\n  otlp:\n    protocols:\n      grpc:\n      http:\n\nprocessors:\n  batch:\n\nexporters:\n  azuremonitor:\n    instrumentation_key: ${INSTRUMENTATION_KEY}\n  otlp/tracetest:\n    endpoint: tracetest:4317\n    tls:\n      insecure: true\n\nservice:\n  pipelines:\n    traces/tracetest:\n      receivers: [otlp]\n      processors: [batch]\n      exporters: [otlp/tracetest]\n    traces/appinsights:\n      receivers: [otlp]\n      exporters: [azuremonitor]\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"tracetest/tracetest.provision.yaml")," file defines the trace data store, set to the Azure App Insights with the ",(0,o.kt)("inlineCode",{parentName:"p"},"collector")," as connection type."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"type: DataStore\nspec:\n  name: azureappinsights\n  type: azureappinsights\n  azureappinsights:\n    connectionType: collector\n    useAzureActiveDirectoryAuth: false\n")),(0,o.kt)("h2",{id:"run-both-the-nodejs-app-and-tracetest"},"Run Both the Node.js App and Tracetest"),(0,o.kt)("p",null,"To start both the Node.js app and Tracetest, run this command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"docker compose -f ./docker-compose.yaml -f ./tracetest/docker-compose.yaml up -d\n")),(0,o.kt)("p",null,"This will start your Tracetest instance on ",(0,o.kt)("inlineCode",{parentName:"p"},"http://localhost:11633/"),". Open it and start creating tests!\nMake sure to use the ",(0,o.kt)("inlineCode",{parentName:"p"},"http://app:3000/")," URL in your test creation because your Node.js app and Tracetest are in the same network."),(0,o.kt)("h2",{id:"learn-more"},"Learn More"),(0,o.kt)("p",null,"Please visit our ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/kubeshop/tracetest/tree/main/examples"},"examples in GitHub")," and join our ",(0,o.kt)("a",{parentName:"p",href:"https://discord.gg/8MtcMrQNbX"},"Discord Community")," for more info!"))}m.isMDXComponent=!0}}]);