"use strict";(self.webpackChunktracetest_docs=self.webpackChunktracetest_docs||[]).push([[1188],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var s=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,s,a=function(e,t){if(null==e)return{};var n,s,a={},r=Object.keys(e);for(s=0;s<r.length;s++)n=r[s],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(s=0;s<r.length;s++)n=r[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=s.createContext({}),l=function(e){var t=s.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=l(e.components);return s.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},m=s.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,p=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=l(n),m=a,h=u["".concat(p,".").concat(m)]||u[m]||d[m]||r;return n?s.createElement(h,o(o({ref:t},c),{},{components:n})):s.createElement(h,o({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=m;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[u]="string"==typeof e?e:a,o[1]=i;for(var l=2;l<r;l++)o[l]=n[l];return s.createElement.apply(null,o)}return s.createElement.apply(null,n)}m.displayName="MDXCreateElement"},23052:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var s=n(87462),a=(n(67294),n(3905));const r={},o="Pokeshop API - List Pokemon",i={unversionedId:"live-examples/pokeshop/use-cases/list-pokemon",id:"live-examples/pokeshop/use-cases/list-pokemon",title:"Pokeshop API - List Pokemon",description:"This use case retrieves the list of Pokemon directly from the database (Postgres) based on the provided query through the API. The purpose of this query is to showcase a straightforward scenario, where the API layer receives a request from the outside and needs to trigger a database query to get some data and return it to the client.",source:"@site/docs/live-examples/pokeshop/use-cases/list-pokemon.md",sourceDirName:"live-examples/pokeshop/use-cases",slug:"/live-examples/pokeshop/use-cases/list-pokemon",permalink:"/live-examples/pokeshop/use-cases/list-pokemon",draft:!1,editUrl:"https://github.com/kubeshop/tracetest/blob/main/docs/docs/live-examples/pokeshop/use-cases/list-pokemon.md",tags:[],version:"current",frontMatter:{},sidebar:"liveExamplesSidebar",previous:{title:"Pokeshop API - Add Pokemon",permalink:"/live-examples/pokeshop/use-cases/add-pokemon"},next:{title:"Pokeshop API - Get Pokemon by ID",permalink:"/live-examples/pokeshop/use-cases/get-pokemon-by-id"}},p={},l=[{value:"Building a Test for This Scenario",id:"building-a-test-for-this-scenario",level:2},{value:"Traces",id:"traces",level:3},{value:"Assertions",id:"assertions",level:3},{value:"Test Definition",id:"test-definition",level:3}],c={toc:l},u="wrapper";function d(e){let{components:t,...r}=e;return(0,a.kt)(u,(0,s.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"pokeshop-api---list-pokemon"},"Pokeshop API - List Pokemon"),(0,a.kt)("p",null,"This use case retrieves the list of Pokemon directly from the database (Postgres) based on the provided query through the API. The purpose of this query is to showcase a straightforward scenario, where the API layer receives a request from the outside and needs to trigger a database query to get some data and return it to the client."),(0,a.kt)("mermaid",{value:"sequenceDiagram\n    participant Endpoint as GET /pokemon\n    participant API as API\n    participant Database as Postgres\n    \n    Endpoint->>API: request\n\n    API->>Database: get list of pokemons\n    Database--\x3e>API: list of pokemons\n\n    API--\x3e>Endpoint: 200 OK <br> [<Pokemon object>, ...]"}),(0,a.kt)("p",null,"You can trigger this use case by calling the endpoint ",(0,a.kt)("inlineCode",{parentName:"p"},"GET /pokemon?take=20&skip=0")," without a payload and should receive a payload similar to this: "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'[\n  {\n    "id":  25,\n    "name":  "pikachu",\n    "type":  "electric",\n    "imageUrl":  "https://assets.pokemon.com/assets/cms2/img/pokedex/full/025.png",\n    "isFeatured":  true\n  },\n  {\n    "id":  26,\n    "name":  "raichu",\n    "type":  "electric",\n    "imageUrl":  "https://assets.pokemon.com/assets/cms2/img/pokedex/full/026.png",\n    "isFeatured":  true\n  },\n  //...\n]\n')),(0,a.kt)("h2",{id:"building-a-test-for-this-scenario"},"Building a Test for This Scenario"),(0,a.kt)("p",null,"Using Tracetest, we can ",(0,a.kt)("a",{parentName:"p",href:"/web-ui/creating-tests"},"create a test")," that will execute an API call on ",(0,a.kt)("inlineCode",{parentName:"p"},"GET /pokemon")," and validate three properties:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The API should return results with HTTP 200 OK."),(0,a.kt)("li",{parentName:"ul"},"The database should respond with low latency (< 200ms)."),(0,a.kt)("li",{parentName:"ul"},"The database query should use the query string parameters ",(0,a.kt)("inlineCode",{parentName:"li"},"take")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"skip")," correctly.")),(0,a.kt)("h3",{id:"traces"},"Traces"),(0,a.kt)("p",null,"Running these tests for the first time will create an Observability trace like the image below, where you can see spans for the API call and database calls:\n",(0,a.kt)("img",{src:n(54883).Z,width:"2502",height:"1232"})),(0,a.kt)("h3",{id:"assertions"},"Assertions"),(0,a.kt)("p",null,"With this trace, we can build ",(0,a.kt)("a",{parentName:"p",href:"/concepts/assertions"},"assertions")," on Tracetest and validate the API response and the database responses:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"The API should return results with HTTP 200 OK:"),"\n",(0,a.kt)("img",{src:n(15328).Z,width:"2986",height:"826"}))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"The database should respond with low latency (< 200ms):"),"\n",(0,a.kt)("img",{src:n(7191).Z,width:"2978",height:"1018"}))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},(0,a.kt)("strong",{parentName:"p"},"The database query should use the query string parameters ",(0,a.kt)("inlineCode",{parentName:"strong"},"take")," and ",(0,a.kt)("inlineCode",{parentName:"strong"},"skip")," correctly:"),"\n",(0,a.kt)("img",{src:n(44886).Z,width:"3524",height:"1006"})))),(0,a.kt)("p",null,"Now you can validate this entire use case."),(0,a.kt)("h3",{id:"test-definition"},"Test Definition"),(0,a.kt)("p",null,"If you want to replicate this entire test on Tracetest, you can replicate these steps on our Web UI or using our CLI, saving the following test definition as the file ",(0,a.kt)("inlineCode",{parentName:"p"},"test-definition.yml")," and later running:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"tracetest run test -f test-definition.yml\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},'type: Test\nspec:\n  name: Pokeshop - List\n  description: Get a Pokemon\n  trigger:\n    type: http\n    httpRequest:\n      url: http://demo-pokemon-api.demo/pokemon?take=20&skip=0\n      method: GET\n      headers:\n      - key: Content-Type\n        value: application/json\n  specs:\n  - selector: span[tracetest.span.type="http" name="GET /pokemon?take=20&skip=0" http.method="GET"]\n    assertions:\n    - attr:http.status_code = 200\n  - selector: span[tracetest.span.type="database"]\n    assertions:\n    - attr:tracetest.span.duration   <=   200ms\n  - selector: span[tracetest.span.type="database" name="pg.query:SELECT pokeshop"\n      db.system="postgresql" db.name="pokeshop" db.user="ashketchum" db.statement\n      contains "SELECT \\"id\\""]\n    assertions:\n    - attr:db.statement        contains  "20 OFFSET 0"\n')))}d.isMDXComponent=!0},15328:(e,t,n)=>{n.d(t,{Z:()=>s});const s=n.p+"assets/images/list-pokemons-api-test-spec-81016722f4f6eccc9a63347316058a87.png"},7191:(e,t,n)=>{n.d(t,{Z:()=>s});const s=n.p+"assets/images/list-pokemons-db-latency-test-spec-8dbd5ba04b1ad5586fe8f073842f2ed0.png"},44886:(e,t,n)=>{n.d(t,{Z:()=>s});const s=n.p+"assets/images/list-pokemons-db-query-test-spec-936dd9ad2a13833c00601e8e9a32556e.png"},54883:(e,t,n)=>{n.d(t,{Z:()=>s});const s=n.p+"assets/images/list-pokemons-trace-b6efacda88f41fd0836f755acabc0637.png"}}]);